[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bolasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2021). bolasso: Model Consistent Lasso Estimation Bootstrap. R package version 0.0.3, https://dmolitor.github.io/bolasso/.","code":"@Manual{,   title = {bolasso: Model Consistent Lasso Estimation Through the Bootstrap},   author = {Daniel Molitor},   year = {2021},   note = {R package version 0.0.3},   url = {https://dmolitor.github.io/bolasso/}, }"},{"path":"/index.html","id":"bolasso-","dir":"","previous_headings":"","what":"Model Consistent Lasso Estimation Through the Bootstrap","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"goal bolasso implement model-consistent Lasso estimation via bootstrap [1].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dmolitor/bolasso\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"illustrate usage bolasso, ’ll use Pima Indians Diabetes dataset determine factors important predictors testing positive diabetes. full description input variables, see link .","code":""},{"path":"/index.html","id":"load-requisite-packages-and-data","dir":"","previous_headings":"Usage","what":"Load requisite packages and data","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"First, run 100-fold bootstrapped Lasso glmnet implementation. can get rough estimate elapsed time using system.time(). can get quick overview model printing bolasso object.","code":"library(bolasso)  data(PimaIndiansDiabetes, package = \"mlbench\")  # Quick overview of the dataset str(PimaIndiansDiabetes) #> 'data.frame':    768 obs. of  9 variables: #>  $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ... #>  $ glucose : num  148 85 183 89 137 116 78 115 197 125 ... #>  $ pressure: num  72 66 64 66 40 74 50 0 70 96 ... #>  $ triceps : num  35 29 0 23 35 0 32 0 45 0 ... #>  $ insulin : num  0 0 0 94 168 0 88 0 543 0 ... #>  $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ... #>  $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ... #>  $ age     : num  50 31 32 21 33 30 26 29 53 54 ... #>  $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ... system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #> Loaded glmnet 4.1-3 #>    user  system elapsed  #>   19.71    0.07   19.79 model #> ------------- 100-fold bootstrapped Lasso ------------- #>  #> Model matrix dimensions: #>    - 8 Predictors #>    - 768 Observations #>  #> Selected variables: #>    - 6/8 predictors selected with 90% threshold #>    - 4/8 predictors selected with 100% threshold"},{"path":"/index.html","id":"extracting-selected-variables","dir":"","previous_headings":"Usage","what":"Extracting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"Next, can extract variables selected 90% 100% bootstrapped Lasso models. can also pass relevant arguments predict cv.glmnet cv.gamlr model objects. case use lambda value minimizes OOS error.","code":"selected_vars(model,               threshold = 0.9,               select = \"lambda.min\") #> # A tibble: 7 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 pressure    -0.0113 #> 5 mass         0.0821 #> 6 pedigree     0.849  #> 7 age          0.0138  selected_vars(model,               threshold = 1,               select = \"lambda.min\") #> # A tibble: 5 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 mass         0.0821 #> 5 pedigree     0.849"},{"path":"/index.html","id":"plotting-selected-variables","dir":"","previous_headings":"Usage","what":"Plotting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can also quickly plot selected variables 90% 100% threshold values.","code":"plot(model, threshold = 0.9) plot(model, threshold = 1)"},{"path":"/index.html","id":"parallelizing-bolasso","dir":"","previous_headings":"Usage","what":"Parallelizing bolasso","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can execute bolasso parallel via future package. can copy code one minor tweak shown . can now run code , unaltered, execute parallel.","code":"future::plan(\"multisession\") system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #>    user  system elapsed  #>    0.14    0.02    5.45"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"[1] Bach, Francis. “Bolasso: Model Consistent Lasso Estimation Bootstrap.” ArXiv:0804.1302 [Cs, Math, Stat], April 8, 2008. http://arxiv.org/abs/0804.1302.","code":""},{"path":"/reference/bolasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootsrap-enhanced Lasso — bolasso","title":"Bootsrap-enhanced Lasso — bolasso","text":"function implements model-consistent Lasso estimation bootstrap. supports parallel processing way future package, allowing user flexibly specify many parallelization methods. method developed variable-selection algorithm, package also supports making ensemble predictions new data using bagged Lasso models.","code":""},{"path":"/reference/bolasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"bolasso(   form,   data,   n.boot = 100,   progress = TRUE,   implement = \"glmnet\",   x = NULL,   y = NULL,   ... )"},{"path":"/reference/bolasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootsrap-enhanced Lasso — bolasso","text":"form optional object class formula (one can coerced class): symbolic description model fitted. Can omitted x y non-missing. data optional object class data.frame contains modeling variables referenced form. Can omitted x y non-missing. n.boot integer specifying number bootstrap replicates. progress boolean indicating whether display progress across bootstrap folds. implement character; either 'glmnet' 'gamlr', specifying Lasso implementation utilize. specific modeling details, see glmnet::cv.glmnet gamlr::cv.gamlr. x optional predictor matrix lieu form data. y optional response vector lieu form data. ... Additional parameters pass either glmnet::cv.glmnet gamlr::cv.gamlr.","code":""},{"path":"/reference/bolasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootsrap-enhanced Lasso — bolasso","text":"object class bolasso. object list length n.boot cv.glmnet cv.gamlr objects.","code":""},{"path":"/reference/bolasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootsrap-enhanced Lasso — bolasso","text":"Bach FR (2008). “Bolasso: model consistent Lasso estimation bootstrap.” CoRR, abs/0804.1302. 0804.1302, http://arxiv.org/abs/0804.1302.","code":""},{"path":[]},{"path":"/reference/bolasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"mtcars[, c(2, 10:11)] <- lapply(mtcars[, c(2, 10:11)], as.factor) idx <- sample(nrow(mtcars), 22) mtcars_train <- mtcars[idx, ] mtcars_test <- mtcars[-idx, ]  ## Formula Interface  # Train model set.seed(123) bolasso_form <- bolasso(   form = mpg ~ .,   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" ) #> Loaded glmnet 4.1-3  # Extract selected variables selected_vars(bolasso_form, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 3 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   27.2    #> 2 hp          -0.0471 #> 3 wt          -4.08    # Bagged ensemble prediction on test data predict(bolasso_form,         new.data = mtcars_test,         select = \"lambda.min\") #>                         boot1     boot2     boot3     boot4    boot5     boot6 #> Mazda RX4 Wag       23.644560 21.388571 20.358116 20.972528 22.68057 20.787645 #> Lincoln Continental  8.784877  8.597955  9.343796  8.777839 11.19919  6.840606 #> Chrysler Imperial    8.171548  8.289624  9.388172  8.656452 10.93344  6.836580 #> Toyota Corona       26.752496 31.351424 25.791595 27.184781 25.96792 27.023569 #> Dodge Challenger    19.120912 18.659944 18.060018 17.468552 19.31797 17.603522 #> AMC Javelin         19.513047 22.985234 18.370341 18.487985 19.58160 18.363549 #> Camaro Z28          14.136871 12.674783 14.638664 13.842982 15.09053 13.517010 #> Pontiac Firebird    15.991929 16.893282 16.466754 16.008954 17.45866 15.683764 #> Fiat X1-9           33.007133 31.701820 28.230900 28.473714 28.66737 29.488317 #> Maserati Bora       11.034076 -6.817640 14.867625 14.172756 12.86328 13.788139 #>                         boot7     boot8    boot9    boot10    boot11    boot12 #> Mazda RX4 Wag       20.586708 20.560185 21.01413 22.163923 19.666553 20.829037 #> Lincoln Continental  9.529867  9.411719 12.13900  7.683959  8.713384  7.994905 #> Chrysler Imperial    9.354100  9.102798 11.85880  7.593633  7.997630  7.312644 #> Toyota Corona       27.050695 25.089718 28.94630 25.908285 30.415963 31.995634 #> Dodge Challenger    17.596372 18.991315 18.66873 18.676292 15.702424 17.329441 #> AMC Javelin         18.551067 19.285890 19.01541 19.101450 15.690219 18.633026 #> Camaro Z28          13.862294 13.735809 17.39459 13.931444 14.168614 11.713639 #> Pontiac Firebird    15.913358 16.893828 16.33920 16.070140 12.277919 15.194288 #> Fiat X1-9           29.074728 28.759828 32.64050 29.426901 33.322289 30.868247 #> Maserati Bora       11.125636 11.804403 11.50749 12.209294  8.360078  9.479482 #>                       boot13    boot14    boot15    boot16    boot17   boot18 #> Mazda RX4 Wag       20.81270 20.732359 20.440081 20.156246 15.886862 20.87350 #> Lincoln Continental 10.52967  9.941445  9.856206  4.975690  8.029345 12.14497 #> Chrysler Imperial   10.41874 10.024477 10.966962  4.961956  6.781118 12.12705 #> Toyota Corona       24.14251 28.063701 24.927970 26.518899 28.989700 28.52693 #> Dodge Challenger    17.89458 17.493347 16.080131 17.534670 15.077864 17.76562 #> AMC Javelin         18.15507 18.209491 21.038380 18.387893 17.010905 18.01619 #> Camaro Z28          14.67799 14.978282 19.420946 12.735231  9.498416 15.05392 #> Pontiac Firebird    16.31017 16.047028 14.428595 15.262942 12.711066 16.08315 #> Fiat X1-9           26.49638 29.532660 32.095662 28.438037 30.104215 30.36523 #> Maserati Bora       13.38722 15.625099 -5.575738 12.886280  7.430002 14.05939 #>                        boot19    boot20 #> Mazda RX4 Wag       20.499438 22.593902 #> Lincoln Continental  8.424775 10.029108 #> Chrysler Imperial    8.240081  9.836698 #> Toyota Corona       28.630112 26.232080 #> Dodge Challenger    17.501705 18.986417 #> AMC Javelin         18.206477 19.293807 #> Camaro Z28          14.506161 14.801208 #> Pontiac Firebird    15.329656 17.014267 #> Fiat X1-9           31.445301 29.136823 #> Maserati Bora       13.979657 12.909015  ## Alternal Matrix Interface  # Train model set.seed(123) bolasso_mat <- bolasso(   x = model.matrix(mpg ~ . - 1, mtcars_train),   y = mtcars_train[, 1],   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" )  # Extract selected variables selected_vars(bolasso_mat, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 3 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   27.2    #> 2 hp          -0.0471 #> 3 wt          -4.08    # Bagged ensemble prediction on test data predict(bolasso_mat,         new.data = model.matrix(mpg ~ . - 1, mtcars_test),         select = \"lambda.min\") #>                         boot1     boot2     boot3     boot4    boot5     boot6 #> Mazda RX4 Wag       23.644560 21.388571 20.358116 20.972528 22.68057 20.787645 #> Lincoln Continental  8.784877  8.597955  9.343796  8.777839 11.19919  6.840606 #> Chrysler Imperial    8.171548  8.289624  9.388172  8.656452 10.93344  6.836580 #> Toyota Corona       26.752496 31.351424 25.791595 27.184781 25.96792 27.023569 #> Dodge Challenger    19.120912 18.659944 18.060018 17.468552 19.31797 17.603522 #> AMC Javelin         19.513047 22.985234 18.370341 18.487985 19.58160 18.363549 #> Camaro Z28          14.136871 12.674783 14.638664 13.842982 15.09053 13.517010 #> Pontiac Firebird    15.991929 16.893282 16.466754 16.008954 17.45866 15.683764 #> Fiat X1-9           33.007133 31.701820 28.230900 28.473714 28.66737 29.488317 #> Maserati Bora       11.034076 -6.817640 14.867625 14.172756 12.86328 13.788139 #>                         boot7     boot8    boot9    boot10    boot11    boot12 #> Mazda RX4 Wag       20.586708 20.560185 21.01413 22.163923 19.666553 20.829037 #> Lincoln Continental  9.529867  9.411719 12.13900  7.683959  8.713384  7.994905 #> Chrysler Imperial    9.354100  9.102798 11.85880  7.593633  7.997630  7.312644 #> Toyota Corona       27.050695 25.089718 28.94630 25.908285 30.415963 31.995634 #> Dodge Challenger    17.596372 18.991315 18.66873 18.676292 15.702424 17.329441 #> AMC Javelin         18.551067 19.285890 19.01541 19.101450 15.690219 18.633026 #> Camaro Z28          13.862294 13.735809 17.39459 13.931444 14.168614 11.713639 #> Pontiac Firebird    15.913358 16.893828 16.33920 16.070140 12.277919 15.194288 #> Fiat X1-9           29.074728 28.759828 32.64050 29.426901 33.322289 30.868247 #> Maserati Bora       11.125636 11.804403 11.50749 12.209294  8.360078  9.479482 #>                       boot13    boot14    boot15    boot16    boot17   boot18 #> Mazda RX4 Wag       20.81270 20.732359 20.440081 20.156246 15.886862 20.87350 #> Lincoln Continental 10.52967  9.941445  9.856206  4.975690  8.029345 12.14497 #> Chrysler Imperial   10.41874 10.024477 10.966962  4.961956  6.781118 12.12705 #> Toyota Corona       24.14251 28.063701 24.927970 26.518899 28.989700 28.52693 #> Dodge Challenger    17.89458 17.493347 16.080131 17.534670 15.077864 17.76562 #> AMC Javelin         18.15507 18.209491 21.038380 18.387893 17.010905 18.01619 #> Camaro Z28          14.67799 14.978282 19.420946 12.735231  9.498416 15.05392 #> Pontiac Firebird    16.31017 16.047028 14.428595 15.262942 12.711066 16.08315 #> Fiat X1-9           26.49638 29.532660 32.095662 28.438037 30.104215 30.36523 #> Maserati Bora       13.38722 15.625099 -5.575738 12.886280  7.430002 14.05939 #>                        boot19    boot20 #> Mazda RX4 Wag       20.499438 22.593902 #> Lincoln Continental  8.424775 10.029108 #> Chrysler Imperial    8.240081  9.836698 #> Toyota Corona       28.630112 26.232080 #> Dodge Challenger    17.501705 18.986417 #> AMC Javelin         18.206477 19.293807 #> Camaro Z28          14.506161 14.801208 #> Pontiac Firebird    15.329656 17.014267 #> Fiat X1-9           31.445301 29.136823 #> Maserati Bora       13.979657 12.909015"},{"path":"/reference/selected_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Bolasso-selected Variables — selected_vars","title":"Bolasso-selected Variables — selected_vars","text":"Identifies independent variables selected Bolasso algorithm least fraction time specified user-defined threshold. typical value threshold 0.9 typically lower .","code":""},{"path":"/reference/selected_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bolasso-selected Variables — selected_vars","text":"","code":"selected_vars(object, threshold = 0.9, summarise = TRUE, ...)"},{"path":"/reference/selected_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bolasso-selected Variables — selected_vars","text":"object object class bolasso. threshold numeric 0 1, specifying fraction bootstrap replicates Lasso must select variable considered selected variable. summarise Boolean indicator FALSE indicates returning full set coefficients selected variable/bootstrap replicate level TRUE indicates taking average variable's coefficient across bootstrap replicates. default value TRUE efficient interpretable. ... Additional arguments pass predict objects class cv.glmnet cv.gamlr.","code":""},{"path":"/reference/selected_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bolasso-selected Variables — selected_vars","text":"tibble selected variable respective coefficient bootstrap replicate.","code":""},{"path":[]}]
