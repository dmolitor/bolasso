[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bolasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2021). bolasso: Model Consistent Lasso Estimation Bootstrap. R package version 0.0.3.","code":"@Manual{,   title = {bolasso: Model Consistent Lasso Estimation through the Bootstrap},   author = {Daniel Molitor},   year = {2021},   note = {R package version 0.0.3}, }"},{"path":"/index.html","id":"bolasso-","dir":"","previous_headings":"","what":"Model Consistent Lasso Estimation through the Bootstrap","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"goal bolasso implement model-consistent Lasso estimation via bootstrap [1].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dmolitor/bolasso\")"},{"path":"/index.html","id":"variable-selection-with-bolasso","dir":"","previous_headings":"","what":"Variable selection with bolasso","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"illustrate usage bolasso, ’ll use Pima Indians Diabetes dataset determine factors important predictors testing positive diabetes. full description input variables, see link .","code":""},{"path":"/index.html","id":"load-requisite-packages-and-data","dir":"","previous_headings":"Variable selection with bolasso","what":"Load requisite packages and data","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"First, run 100-fold bootstrapped Lasso glmnet implementation. can get rough estimate elapsed time using system.time(). can get quick overview model printing bolasso object.","code":"library(bolasso)  data(PimaIndiansDiabetes, package = \"mlbench\")  # Quick overview of the dataset str(PimaIndiansDiabetes) #> 'data.frame':    768 obs. of  9 variables: #>  $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ... #>  $ glucose : num  148 85 183 89 137 116 78 115 197 125 ... #>  $ pressure: num  72 66 64 66 40 74 50 0 70 96 ... #>  $ triceps : num  35 29 0 23 35 0 32 0 45 0 ... #>  $ insulin : num  0 0 0 94 168 0 88 0 543 0 ... #>  $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ... #>  $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ... #>  $ age     : num  50 31 32 21 33 30 26 29 53 54 ... #>  $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ... system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #> Loaded glmnet 4.1-3 #>    user  system elapsed  #>   19.83    0.12   19.96 model #> ------------- 100-fold bootstrapped Lasso ------------- #>  #> Model matrix dimensions: #>    - 8 Predictors #>    - 768 Observations #>  #> Selected variables: #>    - 6/8 predictors selected with 90% threshold #>    - 4/8 predictors selected with 100% threshold"},{"path":"/index.html","id":"extracting-selected-variables","dir":"","previous_headings":"Variable selection with bolasso","what":"Extracting selected variables","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"Next, can extract variables selected 90% 100% bootstrapped Lasso models. can also pass relevant arguments predict cv.glmnet cv.gamlr model objects. case use lambda value minimizes OOS error.","code":"selected_vars(model,               threshold = 0.9,               select = \"lambda.min\") #> # A tibble: 7 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 pressure    -0.0113 #> 5 mass         0.0821 #> 6 pedigree     0.849  #> 7 age          0.0138  selected_vars(model,               threshold = 1,               select = \"lambda.min\") #> # A tibble: 5 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 mass         0.0821 #> 5 pedigree     0.849"},{"path":"/index.html","id":"plotting-selected-variables","dir":"","previous_headings":"Variable selection with bolasso","what":"Plotting selected variables","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"can also quickly plot selected variables 90% 100% threshold values.","code":"plot(model, threshold = 0.9) plot(model, threshold = 1)"},{"path":"/index.html","id":"parallelizing-bolasso","dir":"","previous_headings":"Variable selection with bolasso","what":"Parallelizing bolasso","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"can execute bolasso parallel via future package. can copy code one minor tweak shown . can now run code , unaltered, execute parallel.","code":"future::plan(\"multisession\") system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #>    user  system elapsed  #>    0.12    0.05    5.55"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"[1] Bach, Francis. “Bolasso: Model Consistent Lasso Estimation Bootstrap.” ArXiv:0804.1302 [Cs, Math, Stat], April 8, 2008. http://arxiv.org/abs/0804.1302.","code":""},{"path":"/reference/bolasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootsrap-enhanced Lasso — bolasso","title":"Bootsrap-enhanced Lasso — bolasso","text":"function implements model-consistent Lasso estimation bootstrap. supports parallel processing way future package, allowing user flexibly specify many parallelization methods. method developed variable-selection algorithm, package also supports making ensemble predictions new data using bagged Lasso models.","code":""},{"path":"/reference/bolasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"bolasso(   form,   data,   n.boot = 100,   progress = TRUE,   implement = \"glmnet\",   x = NULL,   y = NULL,   ... )"},{"path":"/reference/bolasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootsrap-enhanced Lasso — bolasso","text":"form optional object class formula (one can coerced class): symbolic description model fitted. Can omitted x y non-missing. data optional object class data.frame contains modeling variables referenced form. Can omitted x y non-missing. n.boot integer specifying number bootstrap replicates. progress boolean indicating whether display progress across bootstrap folds. implement character; either 'glmnet' 'gamlr', specifying Lasso implementation utilize. specific modeling details, see glmnet::cv.glmnet gamlr::cv.gamlr. x optional predictor matrix lieu form data. y optional response vector lieu form data. ... Additional parameters pass either glmnet::cv.glmnet gamlr::cv.gamlr.","code":""},{"path":"/reference/bolasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootsrap-enhanced Lasso — bolasso","text":"object class bolasso. object list length n.boot cv.glmnet cv.gamlr objects.","code":""},{"path":"/reference/bolasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootsrap-enhanced Lasso — bolasso","text":"Bach FR (2008). “Bolasso: model consistent Lasso estimation bootstrap.” CoRR, abs/0804.1302. 0804.1302, http://arxiv.org/abs/0804.1302.","code":""},{"path":[]},{"path":"/reference/bolasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"mtcars[, c(2, 10:11)] <- lapply(mtcars[, c(2, 10:11)], as.factor) idx <- sample(nrow(mtcars), 22) mtcars_train <- mtcars[idx, ] mtcars_test <- mtcars[-idx, ]  ## Formula Interface  # Train model set.seed(123) bolasso_form <- bolasso(   form = mpg ~ .,   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" ) #> Loaded glmnet 4.1-3  # Extract selected variables selected_vars(bolasso_form, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept      5.17 #> 2 carb4         -1.89  # Bagged ensemble prediction on test data predict(bolasso_form,         new.data = mtcars_test,         select = \"lambda.min\") #>                        boot1    boot2    boot3    boot4    boot5     boot6 #> Hornet 4 Drive      17.69924 17.95159 17.47981 18.27117 22.76911 19.319754 #> Hornet Sportabout   19.12932 15.64466 15.08225 16.74896 17.18589 19.308248 #> Merc 280            15.18530 21.36830 17.36056 19.80181 21.22573 17.909299 #> Merc 450SLC         18.84512 17.10952 16.68662 16.48610 18.57449 17.366826 #> Lincoln Continental 15.30801 11.66374 14.63845 14.71504 14.77267  9.668051 #> AMC Javelin         20.06255 16.72647 16.51132 17.29759 17.81131 19.990534 #> Porsche 914-2       27.67891 22.74304 25.91489 27.60261 23.94342 26.987173 #> Lotus Europa        21.06775 21.36208 23.90483 27.40502 24.17296 28.150234 #> Ferrari Dino        16.33571 19.11549 17.03142 20.87500 18.53530 20.128645 #> Volvo 142E          25.73964 24.80955 26.07994 29.10003 26.33723 26.250041 #>                        boot7    boot8    boot9   boot10   boot11    boot12 #> Hornet 4 Drive      18.92021 18.80685 19.71442 17.78897 18.17889 18.554035 #> Hornet Sportabout   16.60552 18.03583 17.71148 16.90633 16.97686 17.980894 #> Merc 280            19.33429 18.77508 19.40547 17.72097 18.32082 18.003053 #> Merc 450SLC         16.91081 16.15781 16.96436 16.72404 17.22869 16.873614 #> Lincoln Continental 14.91326 12.32859 10.33390 14.75271 12.57517  9.975557 #> AMC Javelin         17.59734 18.62261 18.59828 17.81774 17.26090 18.807476 #> Porsche 914-2       28.09353 26.50089 29.74425 23.04195 26.59795 27.585136 #> Lotus Europa        27.42401 23.60485 25.58310 24.32164 26.11794 28.810792 #> Ferrari Dino        20.70971 20.13658 22.08109 16.41085 23.21594 20.480923 #> Volvo 142E          27.49744 24.92463 27.10373 27.64357 28.14050 26.126113 #>                        boot13   boot14   boot15   boot16   boot17   boot18 #> Hornet 4 Drive      19.888858 20.53248 20.68586 18.41641 19.39890 17.70593 #> Hornet Sportabout   17.721797 17.24121 19.30490 18.14218 17.78386 17.18176 #> Merc 280            18.900295 17.87899 19.37214 18.11232 20.39523 16.98368 #> Merc 450SLC         16.729241 17.95102 17.96870 16.56350 16.98457 17.76864 #> Lincoln Continental  9.633876 13.76250 12.18875 10.85811 12.61741 15.84074 #> AMC Javelin         18.047733 17.60163 19.70271 18.56223 18.52162 17.61335 #> Porsche 914-2       23.867027 24.14376 26.59551 24.74669 26.25297 21.47135 #> Lotus Europa        25.651660 24.60988 28.08266 22.82445 22.74565 21.93324 #> Ferrari Dino        19.922134 18.04382 20.98421 18.99000 20.26645 15.92543 #> Volvo 142E          22.374253 28.48603 24.45731 24.86383 25.41490 29.48501 #>                       boot19   boot20 #> Hornet 4 Drive      18.77772 18.32253 #> Hornet Sportabout   19.26404 17.47011 #> Merc 280            16.03833 18.47880 #> Merc 450SLC         18.65653 17.35864 #> Lincoln Continental 14.02130 14.85641 #> AMC Javelin         20.87294 17.86376 #> Porsche 914-2       33.95297 25.25547 #> Lotus Europa        21.09004 23.77538 #> Ferrari Dino        19.40869 18.76238 #> Volvo 142E          26.52805 28.03423  ## Alternal Matrix Interface  # Train model set.seed(123) bolasso_mat <- bolasso(   x = model.matrix(mpg ~ . - 1, mtcars_train),   y = mtcars_train[, 1],   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" )  # Extract selected variables selected_vars(bolasso_mat, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept      5.17 #> 2 carb4         -1.89  # Bagged ensemble prediction on test data predict(bolasso_mat,         new.data = model.matrix(mpg ~ . - 1, mtcars_test),         select = \"lambda.min\") #>                        boot1    boot2    boot3    boot4    boot5     boot6 #> Hornet 4 Drive      17.69924 17.95159 17.47981 18.27117 22.76911 19.319754 #> Hornet Sportabout   19.12932 15.64466 15.08225 16.74896 17.18589 19.308248 #> Merc 280            15.18530 21.36830 17.36056 19.80181 21.22573 17.909299 #> Merc 450SLC         18.84512 17.10952 16.68662 16.48610 18.57449 17.366826 #> Lincoln Continental 15.30801 11.66374 14.63845 14.71504 14.77267  9.668051 #> AMC Javelin         20.06255 16.72647 16.51132 17.29759 17.81131 19.990534 #> Porsche 914-2       27.67891 22.74304 25.91489 27.60261 23.94342 26.987173 #> Lotus Europa        21.06775 21.36208 23.90483 27.40502 24.17296 28.150234 #> Ferrari Dino        16.33571 19.11549 17.03142 20.87500 18.53530 20.128645 #> Volvo 142E          25.73964 24.80955 26.07994 29.10003 26.33723 26.250041 #>                        boot7    boot8    boot9   boot10   boot11    boot12 #> Hornet 4 Drive      18.92021 18.80685 19.71442 17.78897 18.17889 18.554035 #> Hornet Sportabout   16.60552 18.03583 17.71148 16.90633 16.97686 17.980894 #> Merc 280            19.33429 18.77508 19.40547 17.72097 18.32082 18.003053 #> Merc 450SLC         16.91081 16.15781 16.96436 16.72404 17.22869 16.873614 #> Lincoln Continental 14.91326 12.32859 10.33390 14.75271 12.57517  9.975557 #> AMC Javelin         17.59734 18.62261 18.59828 17.81774 17.26090 18.807476 #> Porsche 914-2       28.09353 26.50089 29.74425 23.04195 26.59795 27.585136 #> Lotus Europa        27.42401 23.60485 25.58310 24.32164 26.11794 28.810792 #> Ferrari Dino        20.70971 20.13658 22.08109 16.41085 23.21594 20.480923 #> Volvo 142E          27.49744 24.92463 27.10373 27.64357 28.14050 26.126113 #>                        boot13   boot14   boot15   boot16   boot17   boot18 #> Hornet 4 Drive      19.888858 20.53248 20.68586 18.41641 19.39890 17.70593 #> Hornet Sportabout   17.721797 17.24121 19.30490 18.14218 17.78386 17.18176 #> Merc 280            18.900295 17.87899 19.37214 18.11232 20.39523 16.98368 #> Merc 450SLC         16.729241 17.95102 17.96870 16.56350 16.98457 17.76864 #> Lincoln Continental  9.633876 13.76250 12.18875 10.85811 12.61741 15.84074 #> AMC Javelin         18.047733 17.60163 19.70271 18.56223 18.52162 17.61335 #> Porsche 914-2       23.867027 24.14376 26.59551 24.74669 26.25297 21.47135 #> Lotus Europa        25.651660 24.60988 28.08266 22.82445 22.74565 21.93324 #> Ferrari Dino        19.922134 18.04382 20.98421 18.99000 20.26645 15.92543 #> Volvo 142E          22.374253 28.48603 24.45731 24.86383 25.41490 29.48501 #>                       boot19   boot20 #> Hornet 4 Drive      18.77772 18.32253 #> Hornet Sportabout   19.26404 17.47011 #> Merc 280            16.03833 18.47880 #> Merc 450SLC         18.65653 17.35864 #> Lincoln Continental 14.02130 14.85641 #> AMC Javelin         20.87294 17.86376 #> Porsche 914-2       33.95297 25.25547 #> Lotus Europa        21.09004 23.77538 #> Ferrari Dino        19.40869 18.76238 #> Volvo 142E          26.52805 28.03423"},{"path":"/reference/selected_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Bolasso-selected Variables — selected_vars","title":"Bolasso-selected Variables — selected_vars","text":"Identifies independent variables selected Bolasso algorithm least fraction time specified user-defined threshold. typical value threshold 0.9 typically lower .","code":""},{"path":"/reference/selected_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bolasso-selected Variables — selected_vars","text":"","code":"selected_vars(object, threshold = 0.9, summarise = TRUE, ...)"},{"path":"/reference/selected_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bolasso-selected Variables — selected_vars","text":"object object class bolasso. threshold numeric 0 1, specifying fraction bootstrap replicates Lasso must select variable considered selected variable. summarise Boolean indicator FALSE indicates returning full set coefficients selected variable/bootstrap replicate level TRUE indicates taking average variable's coefficient across bootstrap replicates. default value TRUE efficient interpretable. ... Additional arguments pass predict objects class cv.glmnet cv.gamlr.","code":""},{"path":"/reference/selected_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bolasso-selected Variables — selected_vars","text":"tibble selected variable respective coefficient bootstrap replicate.","code":""},{"path":[]}]
