[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bolasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2022). bolasso: Model Consistent Lasso Estimation Bootstrap. R package version 0.1.0, https://dmolitor.github.io/bolasso/.","code":"@Manual{,   title = {bolasso: Model Consistent Lasso Estimation Through the Bootstrap},   author = {Daniel Molitor},   year = {2022},   note = {R package version 0.1.0},   url = {https://dmolitor.github.io/bolasso/}, }"},{"path":"/index.html","id":"bolasso-","dir":"","previous_headings":"","what":"Model Consistent Lasso Estimation Through the Bootstrap","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"goal bolasso implement model-consistent Lasso estimation via bootstrap [1].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can install canonical version CRAN : install development version GitHub :","code":"install.packages(\"bolasso\") # install.packages(\"devtools\") devtools::install_github(\"dmolitor/bolasso\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"illustrate usage bolasso, ’ll use Pima Indians Diabetes dataset determine factors important predictors testing positive diabetes. full description input variables, see link .","code":""},{"path":"/index.html","id":"load-requisite-packages-and-data","dir":"","previous_headings":"Usage","what":"Load requisite packages and data","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"First, run 100-fold bootstrapped Lasso glmnet implementation. can get rough estimate elapsed time using system.time(). can get quick overview model printing bolasso object.","code":"library(bolasso)  data(PimaIndiansDiabetes, package = \"mlbench\")  # Quick overview of the dataset str(PimaIndiansDiabetes) #> 'data.frame':    768 obs. of  9 variables: #>  $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ... #>  $ glucose : num  148 85 183 89 137 116 78 115 197 125 ... #>  $ pressure: num  72 66 64 66 40 74 50 0 70 96 ... #>  $ triceps : num  35 29 0 23 35 0 32 0 45 0 ... #>  $ insulin : num  0 0 0 94 168 0 88 0 543 0 ... #>  $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ... #>  $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ... #>  $ age     : num  50 31 32 21 33 30 26 29 53 54 ... #>  $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ... system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #> Loaded glmnet 4.1-3 #>    user  system elapsed  #>   42.32    0.11   43.00 model #> ------------- 100-fold bootstrapped Lasso ------------- #>  #> Model matrix dimensions: #>    - 8 Predictors #>    - 768 Observations #>  #> Selected variables: #>    - 6/8 predictors selected with 90% threshold #>    - 4/8 predictors selected with 100% threshold"},{"path":"/index.html","id":"extracting-selected-variables","dir":"","previous_headings":"Usage","what":"Extracting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"Next, can extract variables selected 90% 100% bootstrapped Lasso models. can also pass relevant arguments predict cv.glmnet cv.gamlr model objects. case use lambda value minimizes OOS error.","code":"selected_vars(model,               threshold = 0.9,               select = \"lambda.min\") #> # A tibble: 7 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 pressure    -0.0113 #> 5 mass         0.0821 #> 6 pedigree     0.849  #> 7 age          0.0138  selected_vars(model,               threshold = 1,               select = \"lambda.min\") #> # A tibble: 5 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 mass         0.0821 #> 5 pedigree     0.849"},{"path":"/index.html","id":"plotting-selected-variables","dir":"","previous_headings":"Usage","what":"Plotting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can also quickly plot selected variables 90% 100% threshold values.","code":"plot(model, threshold = 0.9) plot(model, threshold = 1)"},{"path":"/index.html","id":"parallelizing-bolasso","dir":"","previous_headings":"Usage","what":"Parallelizing bolasso","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can execute bolasso parallel via future package. can copy code one minor tweak shown . can now run code , unaltered, execute parallel.","code":"future::plan(\"multisession\") system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #>    user  system elapsed  #>    0.17    0.02    5.56"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"[1] Bach, Francis. “Bolasso: Model Consistent Lasso Estimation Bootstrap.” ArXiv:0804.1302 [Cs, Math, Stat], April 8, 2008. https://arxiv.org/abs/0804.1302.","code":""},{"path":"/reference/bolasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootsrap-enhanced Lasso — bolasso","title":"Bootsrap-enhanced Lasso — bolasso","text":"function implements model-consistent Lasso estimation bootstrap. supports parallel processing way future package, allowing user flexibly specify many parallelization methods. method developed variable-selection algorithm, package also supports making ensemble predictions new data using bagged Lasso models.","code":""},{"path":"/reference/bolasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"bolasso(   form,   data,   n.boot = 100,   progress = TRUE,   implement = \"glmnet\",   x = NULL,   y = NULL,   ... )"},{"path":"/reference/bolasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootsrap-enhanced Lasso — bolasso","text":"form optional object class formula (one can coerced class): symbolic description model fitted. Can omitted x y non-missing. data optional object class data.frame contains modeling variables referenced form. Can omitted x y non-missing. n.boot integer specifying number bootstrap replicates. progress boolean indicating whether display progress across bootstrap folds. implement character; either 'glmnet' 'gamlr', specifying Lasso implementation utilize. specific modeling details, see glmnet::cv.glmnet gamlr::cv.gamlr. x optional predictor matrix lieu form data. y optional response vector lieu form data. ... Additional parameters pass either glmnet::cv.glmnet gamlr::cv.gamlr.","code":""},{"path":"/reference/bolasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootsrap-enhanced Lasso — bolasso","text":"object class bolasso. object list length n.boot cv.glmnet cv.gamlr objects.","code":""},{"path":"/reference/bolasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootsrap-enhanced Lasso — bolasso","text":"Bach FR (2008). “Bolasso: model consistent Lasso estimation bootstrap.” CoRR, abs/0804.1302. 0804.1302, https://arxiv.org/abs/0804.1302.","code":""},{"path":[]},{"path":"/reference/bolasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"mtcars[, c(2, 10:11)] <- lapply(mtcars[, c(2, 10:11)], as.factor) idx <- sample(nrow(mtcars), 22) mtcars_train <- mtcars[idx, ] mtcars_test <- mtcars[-idx, ]  ## Formula Interface  # Train model set.seed(123) bolasso_form <- bolasso(   form = mpg ~ .,   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" ) #> Loaded glmnet 4.1-3  # Extract selected variables selected_vars(bolasso_form, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     26.2  #> 2 wt            -2.31  # Bagged ensemble prediction on test data predict(bolasso_form,         new.data = mtcars_test,         select = \"lambda.min\") #>                        boot1    boot2    boot3     boot4    boot5    boot6 #> Mazda RX4 Wag       21.76404 21.18122 20.83347 23.641015 21.24783 22.17019 #> Hornet Sportabout   17.48812 19.78114 18.53847 15.576519 21.67950 19.00244 #> Merc 230            30.73895 26.01162 22.99075 16.859413 23.84509 24.02592 #> Cadillac Fleetwood  16.40633 14.73581 13.97884  3.488837 13.43936 14.93018 #> Lincoln Continental 15.44837 14.33812 13.42902  3.438867 12.81341 14.59516 #> Dodge Challenger    16.42510 20.37255 18.74941 15.351451 21.91622 19.41979 #> AMC Javelin         19.53651 20.53476 18.94146 14.244904 22.13543 19.49011 #> Camaro Z28          14.89375 13.61969 16.53794 11.520334 16.36679 15.30743 #> Fiat X1-9           29.14683 26.39164 26.19034 34.328702 24.45176 27.02529 #> Ferrari Dino        17.64823 19.05746 20.05230 31.718382 20.36674 20.99762 #>                        boot7    boot8    boot9    boot10    boot11    boot12 #> Mazda RX4 Wag       19.78346 21.55597 22.88456 22.038341 22.165480 21.195188 #> Hornet Sportabout   17.26624 19.42774 17.09754 19.265093 17.509247 19.426048 #> Merc 230            24.41449 23.40554 29.75001 22.269295 22.183296 21.501687 #> Cadillac Fleetwood  14.25118 12.55599 15.37018  8.852272  8.942520  8.699510 #> Lincoln Continental 14.00112 11.88878 15.05006  7.846180  8.129574  7.759599 #> Dodge Challenger    17.68346 19.70814 15.92821 19.316448 17.472153 19.231834 #> AMC Javelin         17.85545 19.93717 17.61460 19.725125 17.813714 19.651716 #> Camaro Z28          16.06079 15.56162 13.75048 14.878623 14.153410 15.343061 #> Fiat X1-9           26.46848 25.85492 27.63789 28.554612 27.395482 26.192294 #> Ferrari Dino        19.17849 19.83334 19.62443 22.457227 20.201550 21.191347 #>                       boot13   boot14   boot15   boot16   boot17    boot18 #> Mazda RX4 Wag       22.27020 19.27667 21.34405 22.06339 21.82334 20.011358 #> Hornet Sportabout   16.17989 19.55355 18.65733 19.78015 18.66327 20.384878 #> Merc 230            23.87149 22.19578 23.76472 21.98604 22.16649 22.521305 #> Cadillac Fleetwood  14.71869 12.47680 12.76120 13.14195 15.72726  8.945469 #> Lincoln Continental 14.71869 11.90752 12.03181 12.48434 15.23285  8.521675 #> Dodge Challenger    16.17989 19.98405 18.71226 19.55873 19.68803 19.833105 #> AMC Javelin         16.17989 20.14789 19.09031 19.86662 19.72290 20.299125 #> Camaro Z28          14.71869 14.25915 16.01434 18.13988 14.61359 14.356170 #> Fiat X1-9           30.77723 23.74329 26.99299 26.52527 24.99467 24.202800 #> Ferrari Dino        23.08562 20.18886 20.39036 22.26600 21.32290 21.154947 #>                       boot19   boot20 #> Mazda RX4 Wag       20.30447 21.45415 #> Hornet Sportabout   18.46757 19.28401 #> Merc 230            25.57238 23.28621 #> Cadillac Fleetwood  15.46526 14.88158 #> Lincoln Continental 15.06313 14.33929 #> Dodge Challenger    18.75481 19.62629 #> AMC Javelin         18.87333 19.79356 #> Camaro Z28          16.79323 16.85673 #> Fiat X1-9           27.74135 26.01588 #> Ferrari Dino        19.41403 20.36153  ## Alternal Matrix Interface  # Train model set.seed(123) bolasso_mat <- bolasso(   x = model.matrix(mpg ~ . - 1, mtcars_train),   y = mtcars_train[, 1],   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" )  # Extract selected variables selected_vars(bolasso_mat, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     26.2  #> 2 wt            -2.31  # Bagged ensemble prediction on test data predict(bolasso_mat,         new.data = model.matrix(mpg ~ . - 1, mtcars_test),         select = \"lambda.min\") #>                        boot1    boot2    boot3     boot4    boot5    boot6 #> Mazda RX4 Wag       21.76404 21.18122 20.83347 23.641015 21.24783 22.17019 #> Hornet Sportabout   17.48812 19.78114 18.53847 15.576519 21.67950 19.00244 #> Merc 230            30.73895 26.01162 22.99075 16.859413 23.84509 24.02592 #> Cadillac Fleetwood  16.40633 14.73581 13.97884  3.488837 13.43936 14.93018 #> Lincoln Continental 15.44837 14.33812 13.42902  3.438867 12.81341 14.59516 #> Dodge Challenger    16.42510 20.37255 18.74941 15.351451 21.91622 19.41979 #> AMC Javelin         19.53651 20.53476 18.94146 14.244904 22.13543 19.49011 #> Camaro Z28          14.89375 13.61969 16.53794 11.520334 16.36679 15.30743 #> Fiat X1-9           29.14683 26.39164 26.19034 34.328702 24.45176 27.02529 #> Ferrari Dino        17.64823 19.05746 20.05230 31.718382 20.36674 20.99762 #>                        boot7    boot8    boot9    boot10    boot11    boot12 #> Mazda RX4 Wag       19.78346 21.55597 22.88456 22.038341 22.165480 21.195188 #> Hornet Sportabout   17.26624 19.42774 17.09754 19.265093 17.509247 19.426048 #> Merc 230            24.41449 23.40554 29.75001 22.269295 22.183296 21.501687 #> Cadillac Fleetwood  14.25118 12.55599 15.37018  8.852272  8.942520  8.699510 #> Lincoln Continental 14.00112 11.88878 15.05006  7.846180  8.129574  7.759599 #> Dodge Challenger    17.68346 19.70814 15.92821 19.316448 17.472153 19.231834 #> AMC Javelin         17.85545 19.93717 17.61460 19.725125 17.813714 19.651716 #> Camaro Z28          16.06079 15.56162 13.75048 14.878623 14.153410 15.343061 #> Fiat X1-9           26.46848 25.85492 27.63789 28.554612 27.395482 26.192294 #> Ferrari Dino        19.17849 19.83334 19.62443 22.457227 20.201550 21.191347 #>                       boot13   boot14   boot15   boot16   boot17    boot18 #> Mazda RX4 Wag       22.27020 19.27667 21.34405 22.06339 21.82334 20.011358 #> Hornet Sportabout   16.17989 19.55355 18.65733 19.78015 18.66327 20.384878 #> Merc 230            23.87149 22.19578 23.76472 21.98604 22.16649 22.521305 #> Cadillac Fleetwood  14.71869 12.47680 12.76120 13.14195 15.72726  8.945469 #> Lincoln Continental 14.71869 11.90752 12.03181 12.48434 15.23285  8.521675 #> Dodge Challenger    16.17989 19.98405 18.71226 19.55873 19.68803 19.833105 #> AMC Javelin         16.17989 20.14789 19.09031 19.86662 19.72290 20.299125 #> Camaro Z28          14.71869 14.25915 16.01434 18.13988 14.61359 14.356170 #> Fiat X1-9           30.77723 23.74329 26.99299 26.52527 24.99467 24.202800 #> Ferrari Dino        23.08562 20.18886 20.39036 22.26600 21.32290 21.154947 #>                       boot19   boot20 #> Mazda RX4 Wag       20.30447 21.45415 #> Hornet Sportabout   18.46757 19.28401 #> Merc 230            25.57238 23.28621 #> Cadillac Fleetwood  15.46526 14.88158 #> Lincoln Continental 15.06313 14.33929 #> Dodge Challenger    18.75481 19.62629 #> AMC Javelin         18.87333 19.79356 #> Camaro Z28          16.79323 16.85673 #> Fiat X1-9           27.74135 26.01588 #> Ferrari Dino        19.41403 20.36153"},{"path":"/reference/selected_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Bolasso-selected Variables — selected_vars","title":"Bolasso-selected Variables — selected_vars","text":"Identifies independent variables selected Bolasso algorithm least fraction time specified user-defined threshold. typical value threshold 0.9 typically lower .","code":""},{"path":"/reference/selected_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bolasso-selected Variables — selected_vars","text":"","code":"selected_vars(object, threshold = 0.9, summarise = TRUE, ...)"},{"path":"/reference/selected_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bolasso-selected Variables — selected_vars","text":"object object class bolasso. threshold numeric 0 1, specifying fraction bootstrap replicates Lasso must select variable considered selected variable. summarise Boolean indicator FALSE indicates returning full set coefficients selected variable/bootstrap replicate level TRUE indicates taking average variable's coefficient across bootstrap replicates. default value TRUE efficient interpretable. ... Additional arguments pass predict objects class cv.glmnet cv.gamlr.","code":""},{"path":"/reference/selected_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bolasso-selected Variables — selected_vars","text":"tibble selected variable respective coefficient bootstrap replicate.","code":""},{"path":[]}]
