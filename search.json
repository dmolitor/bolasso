[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bolasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2022). bolasso: Model Consistent Lasso Estimation Bootstrap. R package version 0.1.0, https://dmolitor.github.io/bolasso/.","code":"@Manual{,   title = {bolasso: Model Consistent Lasso Estimation Through the Bootstrap},   author = {Daniel Molitor},   year = {2022},   note = {R package version 0.1.0},   url = {https://dmolitor.github.io/bolasso/}, }"},{"path":"/index.html","id":"bolasso-","dir":"","previous_headings":"","what":"Model Consistent Lasso Estimation Through the Bootstrap","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"goal bolasso implement model-consistent Lasso estimation via bootstrap [1].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can install canonical version CRAN : install development version GitHub :","code":"install.packages(\"bolasso\") # install.packages(\"devtools\") devtools::install_github(\"dmolitor/bolasso\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"illustrate usage bolasso, ’ll use Pima Indians Diabetes dataset determine factors important predictors testing positive diabetes. full description input variables, see link .","code":""},{"path":"/index.html","id":"load-requisite-packages-and-data","dir":"","previous_headings":"Usage","what":"Load requisite packages and data","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"First, run 100-fold bootstrapped Lasso glmnet implementation. can get rough estimate elapsed time using system.time(). can get quick overview model printing bolasso object.","code":"library(bolasso)  data(PimaIndiansDiabetes, package = \"mlbench\")  # Quick overview of the dataset str(PimaIndiansDiabetes) #> 'data.frame':    768 obs. of  9 variables: #>  $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ... #>  $ glucose : num  148 85 183 89 137 116 78 115 197 125 ... #>  $ pressure: num  72 66 64 66 40 74 50 0 70 96 ... #>  $ triceps : num  35 29 0 23 35 0 32 0 45 0 ... #>  $ insulin : num  0 0 0 94 168 0 88 0 543 0 ... #>  $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ... #>  $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ... #>  $ age     : num  50 31 32 21 33 30 26 29 53 54 ... #>  $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ... system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #> Loaded glmnet 4.1-3 #>    user  system elapsed  #>   42.32    0.11   43.00 model #> ------------- 100-fold bootstrapped Lasso ------------- #>  #> Model matrix dimensions: #>    - 8 Predictors #>    - 768 Observations #>  #> Selected variables: #>    - 6/8 predictors selected with 90% threshold #>    - 4/8 predictors selected with 100% threshold"},{"path":"/index.html","id":"extracting-selected-variables","dir":"","previous_headings":"Usage","what":"Extracting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"Next, can extract variables selected 90% 100% bootstrapped Lasso models. can also pass relevant arguments predict cv.glmnet cv.gamlr model objects. case use lambda value minimizes OOS error.","code":"selected_vars(model,               threshold = 0.9,               select = \"lambda.min\") #> # A tibble: 7 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 pressure    -0.0113 #> 5 mass         0.0821 #> 6 pedigree     0.849  #> 7 age          0.0138  selected_vars(model,               threshold = 1,               select = \"lambda.min\") #> # A tibble: 5 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 mass         0.0821 #> 5 pedigree     0.849"},{"path":"/index.html","id":"plotting-selected-variables","dir":"","previous_headings":"Usage","what":"Plotting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can also quickly plot selected variables 90% 100% threshold values.","code":"plot(model, threshold = 0.9) plot(model, threshold = 1)"},{"path":"/index.html","id":"parallelizing-bolasso","dir":"","previous_headings":"Usage","what":"Parallelizing bolasso","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can execute bolasso parallel via future package. can copy code one minor tweak shown . can now run code , unaltered, execute parallel.","code":"future::plan(\"multisession\") system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #>    user  system elapsed  #>    0.17    0.02    5.56"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"[1] Bach, Francis. “Bolasso: Model Consistent Lasso Estimation Bootstrap.” ArXiv:0804.1302 [Cs, Math, Stat], April 8, 2008. https://arxiv.org/abs/0804.1302.","code":""},{"path":"/reference/bolasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootsrap-enhanced Lasso — bolasso","title":"Bootsrap-enhanced Lasso — bolasso","text":"function implements model-consistent Lasso estimation bootstrap. supports parallel processing way future package, allowing user flexibly specify many parallelization methods. method developed variable-selection algorithm, package also supports making ensemble predictions new data using bagged Lasso models.","code":""},{"path":"/reference/bolasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"bolasso(   form,   data,   n.boot = 100,   progress = TRUE,   implement = \"glmnet\",   x = NULL,   y = NULL,   ... )"},{"path":"/reference/bolasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootsrap-enhanced Lasso — bolasso","text":"form optional object class formula (one can coerced class): symbolic description model fitted. Can omitted x y non-missing. data optional object class data.frame contains modeling variables referenced form. Can omitted x y non-missing. n.boot integer specifying number bootstrap replicates. progress boolean indicating whether display progress across bootstrap folds. implement character; either 'glmnet' 'gamlr', specifying Lasso implementation utilize. specific modeling details, see glmnet::cv.glmnet gamlr::cv.gamlr. x optional predictor matrix lieu form data. y optional response vector lieu form data. ... Additional parameters pass either glmnet::cv.glmnet gamlr::cv.gamlr.","code":""},{"path":"/reference/bolasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootsrap-enhanced Lasso — bolasso","text":"object class bolasso. object list length n.boot cv.glmnet cv.gamlr objects.","code":""},{"path":"/reference/bolasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootsrap-enhanced Lasso — bolasso","text":"Bach FR (2008). “Bolasso: model consistent Lasso estimation bootstrap.” CoRR, abs/0804.1302. 0804.1302, https://arxiv.org/abs/0804.1302.","code":""},{"path":[]},{"path":"/reference/bolasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"mtcars[, c(2, 10:11)] <- lapply(mtcars[, c(2, 10:11)], as.factor) idx <- sample(nrow(mtcars), 22) mtcars_train <- mtcars[idx, ] mtcars_test <- mtcars[-idx, ]  ## Formula Interface  # Train model set.seed(123) bolasso_form <- bolasso(   form = mpg ~ .,   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" ) #> Loaded glmnet 4.1-3  # Extract selected variables selected_vars(bolasso_form, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 3 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     25.4  #> 2 cyl4           3.06 #> 3 wt            -1.93  # Bagged ensemble prediction on test data predict(bolasso_form,         new.data = mtcars_test,         select = \"lambda.min\") #>                      boot1    boot2    boot3    boot4    boot5    boot6 #> Datsun 710        25.43955 31.79118 24.76856 28.84549 30.01312 29.40558 #> Hornet 4 Drive    19.46857 20.68861 20.76448 19.14018 18.62320 19.28849 #> Hornet Sportabout 18.03213 13.71400 18.61155 18.02063 17.40989 17.53204 #> Chrysler Imperial 11.09702 10.23712 10.27052 10.20298 10.52686 10.64544 #> Toyota Corolla    27.85827 32.92310 26.35663 30.51187 31.46861 30.33498 #> AMC Javelin       18.51603 14.29219 16.94966 18.36212 17.68055 17.54162 #> Fiat X1-9         27.32203 33.09013 25.96641 30.23093 31.21789 30.14335 #> Lotus Europa      26.99630 28.95446 26.83018 29.35190 28.76497 28.50754 #> Ford Pantera L    17.58976 16.02875 18.30236 16.76378 15.27969 18.33395 #> Volvo 142E        24.75251 26.71531 25.14671 27.40355 28.74187 28.52407 #>                      boot7    boot8     boot9   boot10   boot11   boot12 #> Datsun 710        32.60356 26.30909 22.949099 18.18804 24.45882 26.32437 #> Hornet 4 Drive    18.99687 16.73668 18.954464 14.81463 20.28072 16.76563 #> Hornet Sportabout 17.79770 14.50419 20.469405 19.51540 19.90432 13.81210 #> Chrysler Imperial 16.13253 10.92954  9.634968 13.04671 10.24853 11.49218 #> Toyota Corolla    32.18455 27.60181 25.050766 20.37997 25.62819 27.39667 #> AMC Javelin       16.41241 15.48379 21.200912 18.93780 20.43576 15.42455 #> Fiat X1-9         32.08268 27.38518 24.915507 20.22988 25.77217 27.17135 #> Lotus Europa      26.87831 26.28352 28.552956 18.77866 29.35034 26.67389 #> Ford Pantera L    20.53487 15.89178 16.179892 17.60834 16.52071 13.99208 #> Volvo 142E        33.12509 25.50110 24.843357 21.71925 26.56969 25.94138 #>                     boot13   boot14    boot15   boot16   boot17   boot18 #> Datsun 710        32.76185 27.71787 26.101983 27.35805 31.61983 24.66154 #> Hornet 4 Drive    17.45322 19.40099 17.616329 17.03055 26.41753 19.40271 #> Hornet Sportabout 14.73634 18.58559 15.506500 15.31213 20.00002 17.78651 #> Chrysler Imperial 13.86020 11.86625  9.664321 11.62027 10.46767 11.52496 #> Toyota Corolla    32.03173 29.44409 27.853112 28.56457 32.93901 26.35038 #> AMC Javelin       14.83339 18.98979 16.347966 15.98471 20.45725 17.79017 #> Fiat X1-9         32.46222 29.16281 27.501737 28.36420 33.05582 25.77251 #> Lotus Europa      32.76097 30.34762 27.168788 27.02694 22.89214 24.91105 #> Ford Pantera L    23.60009 17.11246 16.026446 17.56039 10.33015 18.69990 #> Volvo 142E        31.55360 27.04439 24.769020 26.48310 26.30530 26.14969 #>                     boot19   boot20 #> Datsun 710        23.52573 22.22575 #> Hornet 4 Drive    18.86192 17.56090 #> Hornet Sportabout 20.22091 19.92278 #> Chrysler Imperial  9.94161 10.65696 #> Toyota Corolla    25.38748 23.28116 #> AMC Javelin       20.75751 20.85556 #> Fiat X1-9         25.10116 23.41179 #> Lotus Europa      27.38361 26.83518 #> Ford Pantera L    15.69026 15.44703 #> Volvo 142E        25.30705 25.14344  ## Alternal Matrix Interface  # Train model set.seed(123) bolasso_mat <- bolasso(   x = model.matrix(mpg ~ . - 1, mtcars_train),   y = mtcars_train[, 1],   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" )  # Extract selected variables selected_vars(bolasso_mat, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 3 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     25.4  #> 2 cyl4           3.06 #> 3 wt            -1.93  # Bagged ensemble prediction on test data predict(bolasso_mat,         new.data = model.matrix(mpg ~ . - 1, mtcars_test),         select = \"lambda.min\") #>                      boot1    boot2    boot3    boot4    boot5    boot6 #> Datsun 710        25.43955 31.79118 24.76856 28.84549 30.01312 29.40558 #> Hornet 4 Drive    19.46857 20.68861 20.76448 19.14018 18.62320 19.28849 #> Hornet Sportabout 18.03213 13.71400 18.61155 18.02063 17.40989 17.53204 #> Chrysler Imperial 11.09702 10.23712 10.27052 10.20298 10.52686 10.64544 #> Toyota Corolla    27.85827 32.92310 26.35663 30.51187 31.46861 30.33498 #> AMC Javelin       18.51603 14.29219 16.94966 18.36212 17.68055 17.54162 #> Fiat X1-9         27.32203 33.09013 25.96641 30.23093 31.21789 30.14335 #> Lotus Europa      26.99630 28.95446 26.83018 29.35190 28.76497 28.50754 #> Ford Pantera L    17.58976 16.02875 18.30236 16.76378 15.27969 18.33395 #> Volvo 142E        24.75251 26.71531 25.14671 27.40355 28.74187 28.52407 #>                      boot7    boot8     boot9   boot10   boot11   boot12 #> Datsun 710        32.60356 26.30909 22.949099 18.18804 24.45882 26.32437 #> Hornet 4 Drive    18.99687 16.73668 18.954464 14.81463 20.28072 16.76563 #> Hornet Sportabout 17.79770 14.50419 20.469405 19.51540 19.90432 13.81210 #> Chrysler Imperial 16.13253 10.92954  9.634968 13.04671 10.24853 11.49218 #> Toyota Corolla    32.18455 27.60181 25.050766 20.37997 25.62819 27.39667 #> AMC Javelin       16.41241 15.48379 21.200912 18.93780 20.43576 15.42455 #> Fiat X1-9         32.08268 27.38518 24.915507 20.22988 25.77217 27.17135 #> Lotus Europa      26.87831 26.28352 28.552956 18.77866 29.35034 26.67389 #> Ford Pantera L    20.53487 15.89178 16.179892 17.60834 16.52071 13.99208 #> Volvo 142E        33.12509 25.50110 24.843357 21.71925 26.56969 25.94138 #>                     boot13   boot14    boot15   boot16   boot17   boot18 #> Datsun 710        32.76185 27.71787 26.101983 27.35805 31.61983 24.66154 #> Hornet 4 Drive    17.45322 19.40099 17.616329 17.03055 26.41753 19.40271 #> Hornet Sportabout 14.73634 18.58559 15.506500 15.31213 20.00002 17.78651 #> Chrysler Imperial 13.86020 11.86625  9.664321 11.62027 10.46767 11.52496 #> Toyota Corolla    32.03173 29.44409 27.853112 28.56457 32.93901 26.35038 #> AMC Javelin       14.83339 18.98979 16.347966 15.98471 20.45725 17.79017 #> Fiat X1-9         32.46222 29.16281 27.501737 28.36420 33.05582 25.77251 #> Lotus Europa      32.76097 30.34762 27.168788 27.02694 22.89214 24.91105 #> Ford Pantera L    23.60009 17.11246 16.026446 17.56039 10.33015 18.69990 #> Volvo 142E        31.55360 27.04439 24.769020 26.48310 26.30530 26.14969 #>                     boot19   boot20 #> Datsun 710        23.52573 22.22575 #> Hornet 4 Drive    18.86192 17.56090 #> Hornet Sportabout 20.22091 19.92278 #> Chrysler Imperial  9.94161 10.65696 #> Toyota Corolla    25.38748 23.28116 #> AMC Javelin       20.75751 20.85556 #> Fiat X1-9         25.10116 23.41179 #> Lotus Europa      27.38361 26.83518 #> Ford Pantera L    15.69026 15.44703 #> Volvo 142E        25.30705 25.14344"},{"path":"/reference/selected_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Bolasso-selected Variables — selected_vars","title":"Bolasso-selected Variables — selected_vars","text":"Identifies independent variables selected Bolasso algorithm least fraction time specified user-defined threshold. typical value threshold 0.9 typically lower .","code":""},{"path":"/reference/selected_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bolasso-selected Variables — selected_vars","text":"","code":"selected_vars(object, threshold = 0.9, summarise = TRUE, ...)"},{"path":"/reference/selected_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bolasso-selected Variables — selected_vars","text":"object object class bolasso. threshold numeric 0 1, specifying fraction bootstrap replicates Lasso must select variable considered selected variable. summarise Boolean indicator FALSE indicates returning full set coefficients selected variable/bootstrap replicate level TRUE indicates taking average variable's coefficient across bootstrap replicates. default value TRUE efficient interpretable. ... Additional arguments pass predict objects class cv.glmnet cv.gamlr.","code":""},{"path":"/reference/selected_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bolasso-selected Variables — selected_vars","text":"tibble selected variable respective coefficient bootstrap replicate.","code":""},{"path":[]}]
