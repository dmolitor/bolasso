[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bolasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2024). bolasso: Model Consistent Lasso Estimation Bootstrap. R package version 0.2.0, https://www.dmolitor.com/bolasso/.","code":"@Manual{,   title = {bolasso: Model Consistent Lasso Estimation Through the Bootstrap},   author = {Daniel Molitor},   year = {2024},   note = {R package version 0.2.0},   url = {https://www.dmolitor.com/bolasso/}, }"},{"path":"/index.html","id":"bolasso-","dir":"","previous_headings":"","what":"Model Consistent Lasso Estimation Through the Bootstrap","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"goal bolasso implement model-consistent Lasso estimation via bootstrap [1].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can install CRAN : install development version GitHub :","code":"install.packages(\"bolasso\") # install.packages(\"devtools\") devtools::install_github(\"dmolitor/bolasso\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"illustrate usage bolasso, ’ll use Pima Indians Diabetes dataset determine factors important predictors testing positive diabetes. full description input variables, see link .","code":""},{"path":"/index.html","id":"load-requisite-packages-and-data","dir":"","previous_headings":"Usage","what":"Load requisite packages and data","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"First, run 100-fold bootstrapped Lasso glmnet implementation. can get rough estimate elapsed time using system.time(). can get quick overview model printing bolasso object.","code":"library(bolasso)  data(PimaIndiansDiabetes, package = \"mlbench\")  # Quick overview of the dataset str(PimaIndiansDiabetes) #> 'data.frame':    768 obs. of  9 variables: #>  $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ... #>  $ glucose : num  148 85 183 89 137 116 78 115 197 125 ... #>  $ pressure: num  72 66 64 66 40 74 50 0 70 96 ... #>  $ triceps : num  35 29 0 23 35 0 32 0 45 0 ... #>  $ insulin : num  0 0 0 94 168 0 88 0 543 0 ... #>  $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ... #>  $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ... #>  $ age     : num  50 31 32 21 33 30 26 29 53 54 ... #>  $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ... system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #> Loaded glmnet 4.1-3 #>    user  system elapsed  #>   19.32    0.14   19.58 model #> ------------- 100-fold bootstrapped Lasso ------------- #>  #> Model matrix dimensions: #>    - 8 Predictors #>    - 768 Observations #>  #> Selected variables: #>    - 6/8 predictors selected with 90% threshold #>    - 4/8 predictors selected with 100% threshold"},{"path":"/index.html","id":"extracting-selected-variables","dir":"","previous_headings":"Usage","what":"Extracting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"Next, can extract variables selected 90% 100% bootstrapped Lasso models. can also pass relevant arguments predict cv.glmnet cv.gamlr model objects. case use lambda value minimizes OOS error.","code":"selected_vars(model, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 7 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 pressure    -0.0113 #> 5 mass         0.0821 #> 6 pedigree     0.849  #> 7 age          0.0138  selected_vars(model, threshold = 1, select = \"lambda.min\") #> # A tibble: 5 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 mass         0.0821 #> 5 pedigree     0.849"},{"path":"/index.html","id":"plotting-selected-variables","dir":"","previous_headings":"Usage","what":"Plotting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can also quickly plot selected variables 90% 100% threshold values.","code":"plot(model, threshold = 0.9) plot(model, threshold = 1)"},{"path":"/index.html","id":"parallelizing-bolasso","dir":"","previous_headings":"Usage","what":"Parallelizing bolasso","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can execute bolasso parallel via future package. can copy code one minor tweak shown . can now run code , unaltered, execute parallel.","code":"future::plan(\"multisession\") system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #>    user  system elapsed  #>    0.17    0.03    5.58"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"[1] Bach, Francis. “Bolasso: Model Consistent Lasso Estimation Bootstrap.” ArXiv:0804.1302 [Cs, Math, Stat], April 8, 2008. https://arxiv.org/abs/0804.1302.","code":""},{"path":"/reference/bolasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootsrap-enhanced Lasso — bolasso","title":"Bootsrap-enhanced Lasso — bolasso","text":"function implements model-consistent Lasso estimation bootstrap. supports parallel processing way future package, allowing user flexibly specify many parallelization methods. method developed variable-selection algorithm, package also supports making ensemble predictions new data using bagged Lasso models.","code":""},{"path":"/reference/bolasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"bolasso(   formula,   data,   n.boot = 100,   progress = TRUE,   implement = \"glmnet\",   x = NULL,   y = NULL,   ... )"},{"path":"/reference/bolasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootsrap-enhanced Lasso — bolasso","text":"formula optional object class formula (one can coerced class): symbolic description model fitted. Can omitted x y non-missing. data optional object class data.frame contains modeling variables referenced form. Can omitted x y non-missing. n.boot integer specifying number bootstrap replicates. progress boolean indicating whether display progress across bootstrap folds. implement character; either 'glmnet' 'gamlr', specifying Lasso implementation utilize. specific modeling details, see glmnet::cv.glmnet gamlr::cv.gamlr. x optional predictor matrix lieu form data. y optional response vector lieu form data. ... Additional parameters pass either glmnet::cv.glmnet gamlr::cv.gamlr.","code":""},{"path":"/reference/bolasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootsrap-enhanced Lasso — bolasso","text":"object class bolasso. object list length n.boot cv.glmnet cv.gamlr objects.","code":""},{"path":"/reference/bolasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootsrap-enhanced Lasso — bolasso","text":"Bach FR (2008). “Bolasso: model consistent Lasso estimation bootstrap.” CoRR, abs/0804.1302. 0804.1302, https://arxiv.org/abs/0804.1302.","code":""},{"path":[]},{"path":"/reference/bolasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"mtcars[, c(2, 10:11)] <- lapply(mtcars[, c(2, 10:11)], as.factor) idx <- sample(nrow(mtcars), 22) mtcars_train <- mtcars[idx, ] mtcars_test <- mtcars[-idx, ]  ## Formula Interface  # Train model set.seed(123) bolasso_form <- bolasso(   form = mpg ~ .,   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" ) #> Loaded glmnet 4.1-8  # Extract selected variables selected_vars(bolasso_form, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 1 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept      23.6  # Bagged ensemble prediction on test data predict(bolasso_form,         new.data = mtcars_test,         select = \"lambda.min\") #>                     boot1    boot2    boot3     boot4    boot5    boot6 #> Mazda RX4        23.53203 21.31155 20.38801 22.290720 22.27351 21.94408 #> Datsun 710       26.39838 25.65987 30.73719 27.331865 23.36205 24.69222 #> Duster 360       15.27134 15.34670 13.64426  8.423965 14.22472 15.46800 #> Merc 240D        23.13465 22.65999 27.44668 21.980070 23.39864 21.78321 #> Merc 280         18.72157 18.82589 18.99172 17.249912 21.24348 18.30049 #> Honda Civic      29.66803 28.55722 31.92853 28.131520 27.31862 27.60294 #> Toyota Corolla   28.63992 27.65163 31.55401 30.084933 25.56220 26.69050 #> Camaro Z28       14.61451 14.34784 13.39836  8.986365 14.97222 14.66826 #> Pontiac Firebird 17.25657 14.82313 16.19174 12.794893 16.11565 16.05771 #> Maserati Bora    14.18150 14.71184 17.21216  8.396929 11.88185 14.61647 #>                     boot7    boot8    boot9   boot10   boot11   boot12   boot13 #> Mazda RX4        21.42965 18.82831 23.22819 20.14767 15.38615 21.52801 20.42563 #> Datsun 710       31.17257 25.62445 25.92730 24.50229 26.38631 26.26061 29.43843 #> Duster 360       13.31440 15.80368 15.89598 17.17782 15.19136 12.60124 10.22709 #> Merc 240D        23.64343 21.01089 23.67867 21.78253 24.44045 21.91810 26.32699 #> Merc 280         18.29764 17.98024 19.86190 17.58422 18.97526 17.93253 17.81826 #> Honda Civic      35.80988 25.13158 29.70004 26.70624 29.92394 30.08307 32.93965 #> Toyota Corolla   33.05723 27.56742 28.51666 26.01848 26.83720 27.57016 30.29603 #> Camaro Z28       17.50096 15.51962 14.91479 16.33376 16.78562 14.44168  9.86533 #> Pontiac Firebird 17.97528 15.62626 16.96378 16.31812 16.54070 16.04707 15.59535 #> Maserati Bora    20.20025 17.60688 13.24071 17.30561 19.69561 21.45137 17.86446 #>                    boot14   boot15   boot16   boot17   boot18   boot19   boot20 #> Mazda RX4        20.96366 23.00697 19.63938 20.72184 22.53705 21.92048 21.68905 #> Datsun 710       29.04419 26.01095 21.00265 25.77933 25.60174 25.00468 22.52004 #> Duster 360       12.14012 14.26750 16.01328 14.81375 15.41257 14.91257 15.08037 #> Merc 240D        22.16729 23.64211 19.49836 23.43581 22.98283 22.26822 21.15043 #> Merc 280         18.50003 19.07564 18.52614 19.48435 18.95140 18.24974 20.15770 #> Honda Civic      31.84528 27.46691 22.16310 27.58397 28.90394 27.96428 24.74005 #> Toyota Corolla   30.00382 27.00526 21.95821 26.47687 27.86820 27.03570 23.91624 #> Camaro Z28       13.48879 14.26750 15.80876 14.58134 14.54991 14.16212 14.90464 #> Pontiac Firebird 16.06674 16.75329 15.26705 15.22047 16.91750 15.85567 15.11960 #> Maserati Bora    24.75042 14.54118 16.73050 17.24715 14.33267 13.79177 14.54958  ## Alternal Matrix Interface  # Train model set.seed(123) bolasso_mat <- bolasso(   x = model.matrix(mpg ~ . - 1, mtcars_train),   y = mtcars_train[, 1],   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" )  # Extract selected variables selected_vars(bolasso_mat, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 1 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept      23.6  # Bagged ensemble prediction on test data predict(bolasso_mat,         new.data = model.matrix(mpg ~ . - 1, mtcars_test),         select = \"lambda.min\") #>                     boot1    boot2    boot3     boot4    boot5    boot6 #> Mazda RX4        23.53203 21.31155 20.38801 22.290720 22.27351 21.94408 #> Datsun 710       26.39838 25.65987 30.73719 27.331865 23.36205 24.69222 #> Duster 360       15.27134 15.34670 13.64426  8.423965 14.22472 15.46800 #> Merc 240D        23.13465 22.65999 27.44668 21.980070 23.39864 21.78321 #> Merc 280         18.72157 18.82589 18.99172 17.249912 21.24348 18.30049 #> Honda Civic      29.66803 28.55722 31.92853 28.131520 27.31862 27.60294 #> Toyota Corolla   28.63992 27.65163 31.55401 30.084933 25.56220 26.69050 #> Camaro Z28       14.61451 14.34784 13.39836  8.986365 14.97222 14.66826 #> Pontiac Firebird 17.25657 14.82313 16.19174 12.794893 16.11565 16.05771 #> Maserati Bora    14.18150 14.71184 17.21216  8.396929 11.88185 14.61647 #>                     boot7    boot8    boot9   boot10   boot11   boot12   boot13 #> Mazda RX4        21.42965 18.82831 23.22819 20.14767 15.38615 21.52801 20.42563 #> Datsun 710       31.17257 25.62445 25.92730 24.50229 26.38631 26.26061 29.43843 #> Duster 360       13.31440 15.80368 15.89598 17.17782 15.19136 12.60124 10.22709 #> Merc 240D        23.64343 21.01089 23.67867 21.78253 24.44045 21.91810 26.32699 #> Merc 280         18.29764 17.98024 19.86190 17.58422 18.97526 17.93253 17.81826 #> Honda Civic      35.80988 25.13158 29.70004 26.70624 29.92394 30.08307 32.93965 #> Toyota Corolla   33.05723 27.56742 28.51666 26.01848 26.83720 27.57016 30.29603 #> Camaro Z28       17.50096 15.51962 14.91479 16.33376 16.78562 14.44168  9.86533 #> Pontiac Firebird 17.97528 15.62626 16.96378 16.31812 16.54070 16.04707 15.59535 #> Maserati Bora    20.20025 17.60688 13.24071 17.30561 19.69561 21.45137 17.86446 #>                    boot14   boot15   boot16   boot17   boot18   boot19   boot20 #> Mazda RX4        20.96366 23.00697 19.63938 20.72184 22.53705 21.92048 21.68905 #> Datsun 710       29.04419 26.01095 21.00265 25.77933 25.60174 25.00468 22.52004 #> Duster 360       12.14012 14.26750 16.01328 14.81375 15.41257 14.91257 15.08037 #> Merc 240D        22.16729 23.64211 19.49836 23.43581 22.98283 22.26822 21.15043 #> Merc 280         18.50003 19.07564 18.52614 19.48435 18.95140 18.24974 20.15770 #> Honda Civic      31.84528 27.46691 22.16310 27.58397 28.90394 27.96428 24.74005 #> Toyota Corolla   30.00382 27.00526 21.95821 26.47687 27.86820 27.03570 23.91624 #> Camaro Z28       13.48879 14.26750 15.80876 14.58134 14.54991 14.16212 14.90464 #> Pontiac Firebird 16.06674 16.75329 15.26705 15.22047 16.91750 15.85567 15.11960 #> Maserati Bora    24.75042 14.54118 16.73050 17.24715 14.33267 13.79177 14.54958"},{"path":"/reference/selected_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Bolasso-selected Variables — selected_vars","title":"Bolasso-selected Variables — selected_vars","text":"Identifies independent variables selected Bolasso algorithm least fraction time specified user-defined threshold. typical value threshold 0.9 typically lower .","code":""},{"path":"/reference/selected_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bolasso-selected Variables — selected_vars","text":"","code":"selected_vars(object, threshold = 0.9, summarise = TRUE, ...)"},{"path":"/reference/selected_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bolasso-selected Variables — selected_vars","text":"object object class bolasso. threshold numeric 0 1, specifying fraction bootstrap replicates Lasso must select variable considered selected variable. summarise Boolean indicator FALSE indicates returning full set coefficients selected variable/bootstrap replicate level TRUE indicates taking average variable's coefficient across bootstrap replicates. default value TRUE efficient interpretable. ... Additional arguments pass predict objects class cv.glmnet cv.gamlr.","code":""},{"path":"/reference/selected_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bolasso-selected Variables — selected_vars","text":"tibble selected variable respective coefficient bootstrap replicate.","code":""},{"path":[]},{"path":"/news/index.html","id":"bolasso-020","dir":"Changelog","previous_headings":"","what":"bolasso 0.2.0","title":"bolasso 0.2.0","text":"CRAN release: 2022-05-09 Added NEWS.md file track changes package. bolasso() argument form renamed formula reflect common naming conventions R statistical modeling packages. predict() coef() methods now implemented using future.apply::future_lapply allowing computing predictions extracting coefficients parallel. may result slightly worse performance (due memory overhead) model/prediction data small significantly faster e.g. generating predictions large data-set. Solved issue bolasso() argument formula. user-supplied value formula handled via deparse() default width.cutoff value 60. causing issues formulas splitting multi-element character vectors. now set maximum value 500L correctly parse lengths formulas. predict() now forces evaluation formula argument bolasso() call. resolves issue , user passes formula via variable, predict() pass variable name underlying prediction function opposed actual formula.","code":""}]
