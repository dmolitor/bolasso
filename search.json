[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bolasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2022). bolasso: Model Consistent Lasso Estimation Bootstrap. R package version 0.2.0, https://www.dmolitor.com/bolasso/.","code":"@Manual{,   title = {bolasso: Model Consistent Lasso Estimation Through the Bootstrap},   author = {Daniel Molitor},   year = {2022},   note = {R package version 0.2.0},   url = {https://www.dmolitor.com/bolasso/}, }"},{"path":"/index.html","id":"bolasso-","dir":"","previous_headings":"","what":"Model Consistent Lasso Estimation Through the Bootstrap","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"goal bolasso implement model-consistent Lasso estimation via bootstrap [1].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dmolitor/bolasso\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"illustrate usage bolasso, ’ll use Pima Indians Diabetes dataset determine factors important predictors testing positive diabetes. full description input variables, see link .","code":""},{"path":"/index.html","id":"load-requisite-packages-and-data","dir":"","previous_headings":"Usage","what":"Load requisite packages and data","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"First, run 100-fold bootstrapped Lasso glmnet implementation. can get rough estimate elapsed time using system.time(). can get quick overview model printing bolasso object.","code":"library(bolasso)  data(PimaIndiansDiabetes, package = \"mlbench\")  # Quick overview of the dataset str(PimaIndiansDiabetes) #> 'data.frame':    768 obs. of  9 variables: #>  $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ... #>  $ glucose : num  148 85 183 89 137 116 78 115 197 125 ... #>  $ pressure: num  72 66 64 66 40 74 50 0 70 96 ... #>  $ triceps : num  35 29 0 23 35 0 32 0 45 0 ... #>  $ insulin : num  0 0 0 94 168 0 88 0 543 0 ... #>  $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ... #>  $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ... #>  $ age     : num  50 31 32 21 33 30 26 29 53 54 ... #>  $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ... system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #> Loaded glmnet 4.1-3 #>    user  system elapsed  #>   19.32    0.14   19.58 model #> ------------- 100-fold bootstrapped Lasso ------------- #>  #> Model matrix dimensions: #>    - 8 Predictors #>    - 768 Observations #>  #> Selected variables: #>    - 6/8 predictors selected with 90% threshold #>    - 4/8 predictors selected with 100% threshold"},{"path":"/index.html","id":"extracting-selected-variables","dir":"","previous_headings":"Usage","what":"Extracting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"Next, can extract variables selected 90% 100% bootstrapped Lasso models. can also pass relevant arguments predict cv.glmnet cv.gamlr model objects. case use lambda value minimizes OOS error.","code":"selected_vars(model, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 7 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 pressure    -0.0113 #> 5 mass         0.0821 #> 6 pedigree     0.849  #> 7 age          0.0138  selected_vars(model, threshold = 1, select = \"lambda.min\") #> # A tibble: 5 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 mass         0.0821 #> 5 pedigree     0.849"},{"path":"/index.html","id":"plotting-selected-variables","dir":"","previous_headings":"Usage","what":"Plotting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can also quickly plot selected variables 90% 100% threshold values.","code":"plot(model, threshold = 0.9) plot(model, threshold = 1)"},{"path":"/index.html","id":"parallelizing-bolasso","dir":"","previous_headings":"Usage","what":"Parallelizing bolasso","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can execute bolasso parallel via future package. can copy code one minor tweak shown . can now run code , unaltered, execute parallel.","code":"future::plan(\"multisession\") system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #>    user  system elapsed  #>    0.17    0.03    5.58"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"[1] Bach, Francis. “Bolasso: Model Consistent Lasso Estimation Bootstrap.” ArXiv:0804.1302 [Cs, Math, Stat], April 8, 2008. https://arxiv.org/abs/0804.1302.","code":""},{"path":"/reference/bolasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootsrap-enhanced Lasso — bolasso","title":"Bootsrap-enhanced Lasso — bolasso","text":"function implements model-consistent Lasso estimation bootstrap. supports parallel processing way future package, allowing user flexibly specify many parallelization methods. method developed variable-selection algorithm, package also supports making ensemble predictions new data using bagged Lasso models.","code":""},{"path":"/reference/bolasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"bolasso(   formula,   data,   n.boot = 100,   progress = TRUE,   implement = \"glmnet\",   x = NULL,   y = NULL,   ... )"},{"path":"/reference/bolasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootsrap-enhanced Lasso — bolasso","text":"formula optional object class formula (one can coerced class): symbolic description model fitted. Can omitted x y non-missing. data optional object class data.frame contains modeling variables referenced form. Can omitted x y non-missing. n.boot integer specifying number bootstrap replicates. progress boolean indicating whether display progress across bootstrap folds. implement character; either 'glmnet' 'gamlr', specifying Lasso implementation utilize. specific modeling details, see glmnet::cv.glmnet gamlr::cv.gamlr. x optional predictor matrix lieu form data. y optional response vector lieu form data. ... Additional parameters pass either glmnet::cv.glmnet gamlr::cv.gamlr.","code":""},{"path":"/reference/bolasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootsrap-enhanced Lasso — bolasso","text":"object class bolasso. object list length n.boot cv.glmnet cv.gamlr objects.","code":""},{"path":"/reference/bolasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootsrap-enhanced Lasso — bolasso","text":"Bach FR (2008). “Bolasso: model consistent Lasso estimation bootstrap.” CoRR, abs/0804.1302. 0804.1302, https://arxiv.org/abs/0804.1302.","code":""},{"path":[]},{"path":"/reference/bolasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"mtcars[, c(2, 10:11)] <- lapply(mtcars[, c(2, 10:11)], as.factor) idx <- sample(nrow(mtcars), 22) mtcars_train <- mtcars[idx, ] mtcars_test <- mtcars[-idx, ]  ## Formula Interface  # Train model set.seed(123) bolasso_form <- bolasso(   form = mpg ~ .,   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" ) #> Loaded glmnet 4.1-4  # Extract selected variables selected_vars(bolasso_form, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     10.9  #> 2 drat           3.10  # Bagged ensemble prediction on test data predict(bolasso_form,         new.data = mtcars_test,         select = \"lambda.min\") #>                   boot1    boot2    boot3    boot4    boot5    boot6    boot7 #> Datsun 710     28.23739 22.76799 26.14163 30.79058 24.39929 26.99998 27.26240 #> Duster 360     13.82016 13.66304 16.80029 13.57099 16.12820 16.36782 17.41064 #> Merc 230       23.42902 23.03986 25.86909 26.32375 21.44036 27.21191 25.16401 #> Merc 280C      20.14410 19.69072 20.90703 17.55778 19.75631 20.14694 19.83804 #> Merc 450SLC    16.70856 16.89269 17.91436 16.95218 16.84538 16.80853 17.08464 #> Fiat 128       29.25628 24.43285 28.02294 31.80075 25.55741 28.05651 28.05296 #> Camaro Z28     13.16418 16.02415 16.37099 16.54417 15.39750 16.23831 16.48265 #> Fiat X1-9      29.90018 24.43285 28.49873 31.80075 26.49691 28.38153 28.93802 #> Lotus Europa   26.93777 21.94509 25.34544 23.40932 26.75696 27.01956 29.10974 #> Ford Pantera L 17.01820 17.81238 18.64044 20.76708 17.54120 18.20846 19.07608 #>                   boot8    boot9   boot10   boot11   boot12   boot13   boot14 #> Datsun 710     25.05114 28.32561 23.95276 26.07585 22.46841 19.18533 29.87324 #> Duster 360     18.11097 16.31502 16.11316 17.12337 10.34018 13.72910 15.09769 #> Merc 230       23.77558 31.24133 26.29606 29.53528 22.33827 25.65757 25.37163 #> Merc 280C      20.14600 20.44868 21.57800 21.48436 19.27682 25.50253 19.44269 #> Merc 450SLC    17.46243 18.37710 17.30952 18.23548 14.03156 16.25785 18.05621 #> Fiat 128       25.61771 30.91778 25.79213 28.39177 24.66792 21.02080 30.44192 #> Camaro Z28     18.19168 16.95637 16.52547 16.33836 12.05943 18.37287 12.43247 #> Fiat X1-9      26.20529 30.69151 25.90452 28.13491 25.00436 21.13954 31.59828 #> Lotus Europa   27.20930 25.25403 24.08508 23.12581 23.54140 18.38618 18.85396 #> Ford Pantera L 20.31744 19.76050 18.78042 17.44687 15.82442 16.78050 15.94418 #>                  boot15   boot16   boot17   boot18   boot19   boot20 #> Datsun 710     23.79072 18.70437 28.92896 25.02703 30.06894 25.37033 #> Duster 360     14.39689 13.70505 18.16477 15.62079 17.36808 14.42852 #> Merc 230       22.53595 20.86224 23.28615 25.46959 26.27773 21.53995 #> Merc 280C      19.45909 24.91497 19.33958 20.29652 18.98660 21.21375 #> Merc 450SLC    17.13675 16.35214 17.62744 16.52344 17.66601 16.43115 #> Fiat 128       25.21987 21.18300 29.74118 26.65879 31.10353 27.11422 #> Camaro Z28     14.69220 19.30893 17.72204 15.67979 15.85902 15.14586 #> Fiat X1-9      25.76899 21.18300 30.57515 26.95144 32.04494 27.52984 #> Lotus Europa   24.90745 21.05049 27.18999 25.75213 29.52043 24.55380 #> Ford Pantera L 16.08225 23.18600 19.91582 18.97951 18.51803 17.76267  ## Alternal Matrix Interface  # Train model set.seed(123) bolasso_mat <- bolasso(   x = model.matrix(mpg ~ . - 1, mtcars_train),   y = mtcars_train[, 1],   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" )  # Extract selected variables selected_vars(bolasso_mat, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     10.9  #> 2 drat           3.10  # Bagged ensemble prediction on test data predict(bolasso_mat,         new.data = model.matrix(mpg ~ . - 1, mtcars_test),         select = \"lambda.min\") #>                   boot1    boot2    boot3    boot4    boot5    boot6    boot7 #> Datsun 710     28.23739 22.76799 26.14163 30.79058 24.39929 26.99998 27.26240 #> Duster 360     13.82016 13.66304 16.80029 13.57099 16.12820 16.36782 17.41064 #> Merc 230       23.42902 23.03986 25.86909 26.32375 21.44036 27.21191 25.16401 #> Merc 280C      20.14410 19.69072 20.90703 17.55778 19.75631 20.14694 19.83804 #> Merc 450SLC    16.70856 16.89269 17.91436 16.95218 16.84538 16.80853 17.08464 #> Fiat 128       29.25628 24.43285 28.02294 31.80075 25.55741 28.05651 28.05296 #> Camaro Z28     13.16418 16.02415 16.37099 16.54417 15.39750 16.23831 16.48265 #> Fiat X1-9      29.90018 24.43285 28.49873 31.80075 26.49691 28.38153 28.93802 #> Lotus Europa   26.93777 21.94509 25.34544 23.40932 26.75696 27.01956 29.10974 #> Ford Pantera L 17.01820 17.81238 18.64044 20.76708 17.54120 18.20846 19.07608 #>                   boot8    boot9   boot10   boot11   boot12   boot13   boot14 #> Datsun 710     25.05114 28.32561 23.95276 26.07585 22.46841 19.18533 29.87324 #> Duster 360     18.11097 16.31502 16.11316 17.12337 10.34018 13.72910 15.09769 #> Merc 230       23.77558 31.24133 26.29606 29.53528 22.33827 25.65757 25.37163 #> Merc 280C      20.14600 20.44868 21.57800 21.48436 19.27682 25.50253 19.44269 #> Merc 450SLC    17.46243 18.37710 17.30952 18.23548 14.03156 16.25785 18.05621 #> Fiat 128       25.61771 30.91778 25.79213 28.39177 24.66792 21.02080 30.44192 #> Camaro Z28     18.19168 16.95637 16.52547 16.33836 12.05943 18.37287 12.43247 #> Fiat X1-9      26.20529 30.69151 25.90452 28.13491 25.00436 21.13954 31.59828 #> Lotus Europa   27.20930 25.25403 24.08508 23.12581 23.54140 18.38618 18.85396 #> Ford Pantera L 20.31744 19.76050 18.78042 17.44687 15.82442 16.78050 15.94418 #>                  boot15   boot16   boot17   boot18   boot19   boot20 #> Datsun 710     23.79072 18.70437 28.92896 25.02703 30.06894 25.37033 #> Duster 360     14.39689 13.70505 18.16477 15.62079 17.36808 14.42852 #> Merc 230       22.53595 20.86224 23.28615 25.46959 26.27773 21.53995 #> Merc 280C      19.45909 24.91497 19.33958 20.29652 18.98660 21.21375 #> Merc 450SLC    17.13675 16.35214 17.62744 16.52344 17.66601 16.43115 #> Fiat 128       25.21987 21.18300 29.74118 26.65879 31.10353 27.11422 #> Camaro Z28     14.69220 19.30893 17.72204 15.67979 15.85902 15.14586 #> Fiat X1-9      25.76899 21.18300 30.57515 26.95144 32.04494 27.52984 #> Lotus Europa   24.90745 21.05049 27.18999 25.75213 29.52043 24.55380 #> Ford Pantera L 16.08225 23.18600 19.91582 18.97951 18.51803 17.76267"},{"path":"/reference/selected_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Bolasso-selected Variables — selected_vars","title":"Bolasso-selected Variables — selected_vars","text":"Identifies independent variables selected Bolasso algorithm least fraction time specified user-defined threshold. typical value threshold 0.9 typically lower .","code":""},{"path":"/reference/selected_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bolasso-selected Variables — selected_vars","text":"","code":"selected_vars(object, threshold = 0.9, summarise = TRUE, ...)"},{"path":"/reference/selected_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bolasso-selected Variables — selected_vars","text":"object object class bolasso. threshold numeric 0 1, specifying fraction bootstrap replicates Lasso must select variable considered selected variable. summarise Boolean indicator FALSE indicates returning full set coefficients selected variable/bootstrap replicate level TRUE indicates taking average variable's coefficient across bootstrap replicates. default value TRUE efficient interpretable. ... Additional arguments pass predict objects class cv.glmnet cv.gamlr.","code":""},{"path":"/reference/selected_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bolasso-selected Variables — selected_vars","text":"tibble selected variable respective coefficient bootstrap replicate.","code":""},{"path":[]},{"path":"/news/index.html","id":"bolasso-020","dir":"Changelog","previous_headings":"","what":"bolasso 0.2.0","title":"bolasso 0.2.0","text":"Added NEWS.md file track changes package. bolasso() argument form renamed formula reflect common naming conventions R statistical modeling packages. predict() coef() methods now implemented using future.apply::future_lapply allowing computing predictions extracting coefficients parallel. may result slightly worse performance (due memory overhead) model/prediction data small significantly faster e.g. generating predictions large data-set. Solved issue bolasso() argument formula. user-supplied value formula handled via deparse() default width.cutoff value 60. causing issues formulas splitting multi-element character vectors. now set maximum value 500L correctly parse lengths formulas. predict() now forces evaluation formula argument bolasso() call. resolves issue , user passes formula via variable, predict() pass variable name underlying prediction function opposed actual formula.","code":""}]
