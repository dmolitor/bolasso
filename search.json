[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bolasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2022). bolasso: Model Consistent Lasso Estimation Bootstrap. R package version 0.1.0, https://dmolitor.github.io/bolasso/.","code":"@Manual{,   title = {bolasso: Model Consistent Lasso Estimation Through the Bootstrap},   author = {Daniel Molitor},   year = {2022},   note = {R package version 0.1.0},   url = {https://dmolitor.github.io/bolasso/}, }"},{"path":"/index.html","id":"bolasso-","dir":"","previous_headings":"","what":"Model Consistent Lasso Estimation Through the Bootstrap","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"goal bolasso implement model-consistent Lasso estimation via bootstrap [1].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can install canonical version CRAN : install development version GitHub :","code":"install.packages(\"bolasso\") # install.packages(\"devtools\") devtools::install_github(\"dmolitor/bolasso\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"illustrate usage bolasso, ’ll use Pima Indians Diabetes dataset determine factors important predictors testing positive diabetes. full description input variables, see link .","code":""},{"path":"/index.html","id":"load-requisite-packages-and-data","dir":"","previous_headings":"Usage","what":"Load requisite packages and data","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"First, run 100-fold bootstrapped Lasso glmnet implementation. can get rough estimate elapsed time using system.time(). can get quick overview model printing bolasso object.","code":"library(bolasso)  data(PimaIndiansDiabetes, package = \"mlbench\")  # Quick overview of the dataset str(PimaIndiansDiabetes) #> 'data.frame':    768 obs. of  9 variables: #>  $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ... #>  $ glucose : num  148 85 183 89 137 116 78 115 197 125 ... #>  $ pressure: num  72 66 64 66 40 74 50 0 70 96 ... #>  $ triceps : num  35 29 0 23 35 0 32 0 45 0 ... #>  $ insulin : num  0 0 0 94 168 0 88 0 543 0 ... #>  $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ... #>  $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ... #>  $ age     : num  50 31 32 21 33 30 26 29 53 54 ... #>  $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ... system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #> Loaded glmnet 4.1-3 #>    user  system elapsed  #>   42.32    0.11   43.00 model #> ------------- 100-fold bootstrapped Lasso ------------- #>  #> Model matrix dimensions: #>    - 8 Predictors #>    - 768 Observations #>  #> Selected variables: #>    - 6/8 predictors selected with 90% threshold #>    - 4/8 predictors selected with 100% threshold"},{"path":"/index.html","id":"extracting-selected-variables","dir":"","previous_headings":"Usage","what":"Extracting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"Next, can extract variables selected 90% 100% bootstrapped Lasso models. can also pass relevant arguments predict cv.glmnet cv.gamlr model objects. case use lambda value minimizes OOS error.","code":"selected_vars(model,               threshold = 0.9,               select = \"lambda.min\") #> # A tibble: 7 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 pressure    -0.0113 #> 5 mass         0.0821 #> 6 pedigree     0.849  #> 7 age          0.0138  selected_vars(model,               threshold = 1,               select = \"lambda.min\") #> # A tibble: 5 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 mass         0.0821 #> 5 pedigree     0.849"},{"path":"/index.html","id":"plotting-selected-variables","dir":"","previous_headings":"Usage","what":"Plotting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can also quickly plot selected variables 90% 100% threshold values.","code":"plot(model, threshold = 0.9) plot(model, threshold = 1)"},{"path":"/index.html","id":"parallelizing-bolasso","dir":"","previous_headings":"Usage","what":"Parallelizing bolasso","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can execute bolasso parallel via future package. can copy code one minor tweak shown . can now run code , unaltered, execute parallel.","code":"future::plan(\"multisession\") system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #>    user  system elapsed  #>    0.17    0.02    5.56"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"[1] Bach, Francis. “Bolasso: Model Consistent Lasso Estimation Bootstrap.” ArXiv:0804.1302 [Cs, Math, Stat], April 8, 2008. https://arxiv.org/abs/0804.1302.","code":""},{"path":"/reference/bolasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootsrap-enhanced Lasso — bolasso","title":"Bootsrap-enhanced Lasso — bolasso","text":"function implements model-consistent Lasso estimation bootstrap. supports parallel processing way future package, allowing user flexibly specify many parallelization methods. method developed variable-selection algorithm, package also supports making ensemble predictions new data using bagged Lasso models.","code":""},{"path":"/reference/bolasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"bolasso(   form,   data,   n.boot = 100,   progress = TRUE,   implement = \"glmnet\",   x = NULL,   y = NULL,   ... )"},{"path":"/reference/bolasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootsrap-enhanced Lasso — bolasso","text":"form optional object class formula (one can coerced class): symbolic description model fitted. Can omitted x y non-missing. data optional object class data.frame contains modeling variables referenced form. Can omitted x y non-missing. n.boot integer specifying number bootstrap replicates. progress boolean indicating whether display progress across bootstrap folds. implement character; either 'glmnet' 'gamlr', specifying Lasso implementation utilize. specific modeling details, see glmnet::cv.glmnet gamlr::cv.gamlr. x optional predictor matrix lieu form data. y optional response vector lieu form data. ... Additional parameters pass either glmnet::cv.glmnet gamlr::cv.gamlr.","code":""},{"path":"/reference/bolasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootsrap-enhanced Lasso — bolasso","text":"object class bolasso. object list length n.boot cv.glmnet cv.gamlr objects.","code":""},{"path":"/reference/bolasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootsrap-enhanced Lasso — bolasso","text":"Bach FR (2008). “Bolasso: model consistent Lasso estimation bootstrap.” CoRR, abs/0804.1302. 0804.1302, https://arxiv.org/abs/0804.1302.","code":""},{"path":[]},{"path":"/reference/bolasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"mtcars[, c(2, 10:11)] <- lapply(mtcars[, c(2, 10:11)], as.factor) idx <- sample(nrow(mtcars), 22) mtcars_train <- mtcars[idx, ] mtcars_test <- mtcars[-idx, ]  ## Formula Interface  # Train model set.seed(123) bolasso_form <- bolasso(   form = mpg ~ .,   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" ) #> Loaded glmnet 4.1-3  # Extract selected variables selected_vars(bolasso_form, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     11.7  #> 2 wt            -3.18  # Bagged ensemble prediction on test data predict(bolasso_form,         new.data = mtcars_test,         select = \"lambda.min\") #>                      boot1    boot2    boot3    boot4    boot5    boot6 #> Mazda RX4         23.26766 21.46072 20.41443 20.91785 23.62603 24.83718 #> Hornet Sportabout 19.31635 19.10984 21.04466 18.17266 19.41161 18.61427 #> Merc 240D         22.73438 26.81913 18.09434 25.02151 24.68292 23.92291 #> Merc 230          22.36888 25.93944 30.58464 24.80125 26.09336 22.86140 #> Merc 280          18.84694 19.18335 15.43930 18.68182 21.98044 19.08743 #> Merc 450SL        17.74597 17.44931 14.00087 17.37792 18.62414 17.15167 #> Dodge Challenger  19.33894 19.68858 19.90203 18.21171 18.60368 19.32233 #> AMC Javelin       19.77390 19.89173 22.72100 18.43030 19.79012 19.48671 #> Ford Pantera L    19.16020 15.43573 26.26245 17.99554 20.37869 18.45885 #> Ferrari Dino      21.19071 20.64472 21.50716 19.89565 21.60812 22.89607 #>                      boot7    boot8    boot9   boot10   boot11   boot12 #> Mazda RX4         22.04607 21.21836 18.50699 24.29169 20.82601 24.68322 #> Hornet Sportabout 19.11169 15.73753 20.14150 18.05702 20.85490 15.58704 #> Merc 240D         18.71824 22.00404 27.28882 22.37491 24.22367 21.06155 #> Merc 230          19.05419 21.93072 31.10573 21.47377 31.98479 25.25918 #> Merc 280          15.23155 18.81447 17.88809 19.66603 16.81430 18.85253 #> Merc 450SL        20.45477 16.61329 18.45985 16.97778 19.50161 15.39972 #> Dodge Challenger  18.88436 16.40832 19.66339 18.58146 19.47072 14.36036 #> AMC Javelin       19.14719 16.69805 20.51413 18.85211 21.57626 15.94671 #> Ford Pantera L    23.88388 16.96981 14.29360 17.74070 14.01015 21.62895 #> Ferrari Dino      26.91891 20.88360 20.37968 21.79988 18.11646 22.52250 #>                     boot13    boot14   boot15   boot16   boot17   boot18 #> Mazda RX4         23.63524 19.989828 21.72591 21.37257 18.13922 23.61170 #> Hornet Sportabout 18.18185 12.861407 18.92991 18.43125 22.88893 18.07862 #> Merc 240D         22.84111 20.968823 25.77361 21.74555 28.62094 25.77640 #> Merc 230          22.18168 31.892238 31.45393 21.84396 45.04634 26.67576 #> Merc 280          18.82139 22.700631 19.35080 19.47076 14.75017 21.89670 #> Merc 450SL        16.91529 17.028361 15.97126 16.07008 30.95173 17.44393 #> Dodge Challenger  18.57632  9.050242 17.88010 18.19823 25.11161 17.98826 #> AMC Javelin       18.75609 13.742110 19.44956 18.47355 29.49370 18.37707 #> Ford Pantera L    18.99981 21.081433 17.42431 17.49151 10.56418 15.14191 #> Ferrari Dino      21.85246 17.173132 19.17920 20.88984 27.52876 19.39544 #>                     boot19   boot20 #> Mazda RX4         21.76410 22.29269 #> Hornet Sportabout 18.71738 18.65455 #> Merc 240D         23.71424 22.02639 #> Merc 230          22.78992 21.53241 #> Merc 280          18.43975 18.46901 #> Merc 450SL        17.01712 17.29413 #> Dodge Challenger  19.36443 18.81298 #> AMC Javelin       19.69618 19.18208 #> Ford Pantera L    17.90502 16.97246 #> Ferrari Dino      21.99839 21.74769  ## Alternal Matrix Interface  # Train model set.seed(123) bolasso_mat <- bolasso(   x = model.matrix(mpg ~ . - 1, mtcars_train),   y = mtcars_train[, 1],   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" )  # Extract selected variables selected_vars(bolasso_mat, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     11.7  #> 2 wt            -3.18  # Bagged ensemble prediction on test data predict(bolasso_mat,         new.data = model.matrix(mpg ~ . - 1, mtcars_test),         select = \"lambda.min\") #>                      boot1    boot2    boot3    boot4    boot5    boot6 #> Mazda RX4         23.26766 21.46072 20.41443 20.91785 23.62603 24.83718 #> Hornet Sportabout 19.31635 19.10984 21.04466 18.17266 19.41161 18.61427 #> Merc 240D         22.73438 26.81913 18.09434 25.02151 24.68292 23.92291 #> Merc 230          22.36888 25.93944 30.58464 24.80125 26.09336 22.86140 #> Merc 280          18.84694 19.18335 15.43930 18.68182 21.98044 19.08743 #> Merc 450SL        17.74597 17.44931 14.00087 17.37792 18.62414 17.15167 #> Dodge Challenger  19.33894 19.68858 19.90203 18.21171 18.60368 19.32233 #> AMC Javelin       19.77390 19.89173 22.72100 18.43030 19.79012 19.48671 #> Ford Pantera L    19.16020 15.43573 26.26245 17.99554 20.37869 18.45885 #> Ferrari Dino      21.19071 20.64472 21.50716 19.89565 21.60812 22.89607 #>                      boot7    boot8    boot9   boot10   boot11   boot12 #> Mazda RX4         22.04607 21.21836 18.50699 24.29169 20.82601 24.68322 #> Hornet Sportabout 19.11169 15.73753 20.14150 18.05702 20.85490 15.58704 #> Merc 240D         18.71824 22.00404 27.28882 22.37491 24.22367 21.06155 #> Merc 230          19.05419 21.93072 31.10573 21.47377 31.98479 25.25918 #> Merc 280          15.23155 18.81447 17.88809 19.66603 16.81430 18.85253 #> Merc 450SL        20.45477 16.61329 18.45985 16.97778 19.50161 15.39972 #> Dodge Challenger  18.88436 16.40832 19.66339 18.58146 19.47072 14.36036 #> AMC Javelin       19.14719 16.69805 20.51413 18.85211 21.57626 15.94671 #> Ford Pantera L    23.88388 16.96981 14.29360 17.74070 14.01015 21.62895 #> Ferrari Dino      26.91891 20.88360 20.37968 21.79988 18.11646 22.52250 #>                     boot13    boot14   boot15   boot16   boot17   boot18 #> Mazda RX4         23.63524 19.989828 21.72591 21.37257 18.13922 23.61170 #> Hornet Sportabout 18.18185 12.861407 18.92991 18.43125 22.88893 18.07862 #> Merc 240D         22.84111 20.968823 25.77361 21.74555 28.62094 25.77640 #> Merc 230          22.18168 31.892238 31.45393 21.84396 45.04634 26.67576 #> Merc 280          18.82139 22.700631 19.35080 19.47076 14.75017 21.89670 #> Merc 450SL        16.91529 17.028361 15.97126 16.07008 30.95173 17.44393 #> Dodge Challenger  18.57632  9.050242 17.88010 18.19823 25.11161 17.98826 #> AMC Javelin       18.75609 13.742110 19.44956 18.47355 29.49370 18.37707 #> Ford Pantera L    18.99981 21.081433 17.42431 17.49151 10.56418 15.14191 #> Ferrari Dino      21.85246 17.173132 19.17920 20.88984 27.52876 19.39544 #>                     boot19   boot20 #> Mazda RX4         21.76410 22.29269 #> Hornet Sportabout 18.71738 18.65455 #> Merc 240D         23.71424 22.02639 #> Merc 230          22.78992 21.53241 #> Merc 280          18.43975 18.46901 #> Merc 450SL        17.01712 17.29413 #> Dodge Challenger  19.36443 18.81298 #> AMC Javelin       19.69618 19.18208 #> Ford Pantera L    17.90502 16.97246 #> Ferrari Dino      21.99839 21.74769"},{"path":"/reference/selected_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Bolasso-selected Variables — selected_vars","title":"Bolasso-selected Variables — selected_vars","text":"Identifies independent variables selected Bolasso algorithm least fraction time specified user-defined threshold. typical value threshold 0.9 typically lower .","code":""},{"path":"/reference/selected_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bolasso-selected Variables — selected_vars","text":"","code":"selected_vars(object, threshold = 0.9, summarise = TRUE, ...)"},{"path":"/reference/selected_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bolasso-selected Variables — selected_vars","text":"object object class bolasso. threshold numeric 0 1, specifying fraction bootstrap replicates Lasso must select variable considered selected variable. summarise Boolean indicator FALSE indicates returning full set coefficients selected variable/bootstrap replicate level TRUE indicates taking average variable's coefficient across bootstrap replicates. default value TRUE efficient interpretable. ... Additional arguments pass predict objects class cv.glmnet cv.gamlr.","code":""},{"path":"/reference/selected_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bolasso-selected Variables — selected_vars","text":"tibble selected variable respective coefficient bootstrap replicate.","code":""},{"path":[]}]
