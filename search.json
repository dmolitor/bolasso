[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bolasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2022). bolasso: Model Consistent Lasso Estimation Bootstrap. R package version 0.2.0, https://www.dmolitor.com/bolasso/.","code":"@Manual{,   title = {bolasso: Model Consistent Lasso Estimation Through the Bootstrap},   author = {Daniel Molitor},   year = {2022},   note = {R package version 0.2.0},   url = {https://www.dmolitor.com/bolasso/}, }"},{"path":"/index.html","id":"bolasso-","dir":"","previous_headings":"","what":"Model Consistent Lasso Estimation Through the Bootstrap","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"goal bolasso implement model-consistent Lasso estimation via bootstrap [1].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dmolitor/bolasso\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"illustrate usage bolasso, ’ll use Pima Indians Diabetes dataset determine factors important predictors testing positive diabetes. full description input variables, see link .","code":""},{"path":"/index.html","id":"load-requisite-packages-and-data","dir":"","previous_headings":"Usage","what":"Load requisite packages and data","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"First, run 100-fold bootstrapped Lasso glmnet implementation. can get rough estimate elapsed time using system.time(). can get quick overview model printing bolasso object.","code":"library(bolasso)  data(PimaIndiansDiabetes, package = \"mlbench\")  # Quick overview of the dataset str(PimaIndiansDiabetes) #> 'data.frame':    768 obs. of  9 variables: #>  $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ... #>  $ glucose : num  148 85 183 89 137 116 78 115 197 125 ... #>  $ pressure: num  72 66 64 66 40 74 50 0 70 96 ... #>  $ triceps : num  35 29 0 23 35 0 32 0 45 0 ... #>  $ insulin : num  0 0 0 94 168 0 88 0 543 0 ... #>  $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ... #>  $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ... #>  $ age     : num  50 31 32 21 33 30 26 29 53 54 ... #>  $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ... system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #> Loaded glmnet 4.1-3 #>    user  system elapsed  #>   19.32    0.14   19.58 model #> ------------- 100-fold bootstrapped Lasso ------------- #>  #> Model matrix dimensions: #>    - 8 Predictors #>    - 768 Observations #>  #> Selected variables: #>    - 6/8 predictors selected with 90% threshold #>    - 4/8 predictors selected with 100% threshold"},{"path":"/index.html","id":"extracting-selected-variables","dir":"","previous_headings":"Usage","what":"Extracting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"Next, can extract variables selected 90% 100% bootstrapped Lasso models. can also pass relevant arguments predict cv.glmnet cv.gamlr model objects. case use lambda value minimizes OOS error.","code":"selected_vars(model, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 7 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 pressure    -0.0113 #> 5 mass         0.0821 #> 6 pedigree     0.849  #> 7 age          0.0138  selected_vars(model, threshold = 1, select = \"lambda.min\") #> # A tibble: 5 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 mass         0.0821 #> 5 pedigree     0.849"},{"path":"/index.html","id":"plotting-selected-variables","dir":"","previous_headings":"Usage","what":"Plotting selected variables","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can also quickly plot selected variables 90% 100% threshold values.","code":"plot(model, threshold = 0.9) plot(model, threshold = 1)"},{"path":"/index.html","id":"parallelizing-bolasso","dir":"","previous_headings":"Usage","what":"Parallelizing bolasso","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"can execute bolasso parallel via future package. can copy code one minor tweak shown . can now run code , unaltered, execute parallel.","code":"future::plan(\"multisession\") system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #>    user  system elapsed  #>    0.17    0.03    5.58"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model Consistent Lasso Estimation Through the Bootstrap","text":"[1] Bach, Francis. “Bolasso: Model Consistent Lasso Estimation Bootstrap.” ArXiv:0804.1302 [Cs, Math, Stat], April 8, 2008. https://arxiv.org/abs/0804.1302.","code":""},{"path":"/reference/bolasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootsrap-enhanced Lasso — bolasso","title":"Bootsrap-enhanced Lasso — bolasso","text":"function implements model-consistent Lasso estimation bootstrap. supports parallel processing way future package, allowing user flexibly specify many parallelization methods. method developed variable-selection algorithm, package also supports making ensemble predictions new data using bagged Lasso models.","code":""},{"path":"/reference/bolasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"bolasso(   formula,   data,   n.boot = 100,   progress = TRUE,   implement = \"glmnet\",   x = NULL,   y = NULL,   ... )"},{"path":"/reference/bolasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootsrap-enhanced Lasso — bolasso","text":"formula optional object class formula (one can coerced class): symbolic description model fitted. Can omitted x y non-missing. data optional object class data.frame contains modeling variables referenced form. Can omitted x y non-missing. n.boot integer specifying number bootstrap replicates. progress boolean indicating whether display progress across bootstrap folds. implement character; either 'glmnet' 'gamlr', specifying Lasso implementation utilize. specific modeling details, see glmnet::cv.glmnet gamlr::cv.gamlr. x optional predictor matrix lieu form data. y optional response vector lieu form data. ... Additional parameters pass either glmnet::cv.glmnet gamlr::cv.gamlr.","code":""},{"path":"/reference/bolasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootsrap-enhanced Lasso — bolasso","text":"object class bolasso. object list length n.boot cv.glmnet cv.gamlr objects.","code":""},{"path":"/reference/bolasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootsrap-enhanced Lasso — bolasso","text":"Bach FR (2008). “Bolasso: model consistent Lasso estimation bootstrap.” CoRR, abs/0804.1302. 0804.1302, https://arxiv.org/abs/0804.1302.","code":""},{"path":[]},{"path":"/reference/bolasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"mtcars[, c(2, 10:11)] <- lapply(mtcars[, c(2, 10:11)], as.factor) idx <- sample(nrow(mtcars), 22) mtcars_train <- mtcars[idx, ] mtcars_test <- mtcars[-idx, ]  ## Formula Interface  # Train model set.seed(123) bolasso_form <- bolasso(   form = mpg ~ .,   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" ) #> Loaded glmnet 4.1-4  # Extract selected variables selected_vars(bolasso_form, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     21.7  #> 2 wt            -3.04  # Bagged ensemble prediction on test data predict(bolasso_form,         new.data = mtcars_test,         select = \"lambda.min\") #>                        boot1    boot2     boot3    boot4    boot5    boot6 #> Mazda RX4           20.76134 20.34704 21.239324 19.60828 21.12979 20.96082 #> Hornet 4 Drive      18.75163 19.29475 16.366901 17.61425 18.05342 18.98135 #> Merc 280            17.89915 21.65255 15.322505 18.66957 18.48299 18.09306 #> Lincoln Continental 10.54323 17.21361  9.862591 11.41671 10.01480 10.50363 #> Chrysler Imperial   10.70333 17.99750 10.009883 11.76223 10.23903 10.60520 #> Fiat 128            26.77030 26.77135 27.474993 23.85337 23.79135 25.40743 #> Fiat X1-9           27.66538 25.81630 28.044054 24.08995 24.65012 26.28904 #> Porsche 914-2       26.79507 24.71485 28.210405 23.07841 22.23800 25.33830 #> Ford Pantera L      17.80783 19.85633 19.977539 15.11513 17.53030 17.47561 #> Volvo 142E          24.50529 27.16728 26.479446 22.39905 21.61929 23.01562 #>                         boot7     boot8    boot9    boot10   boot11    boot12 #> Mazda RX4           22.869079 21.753744 16.65284 21.499026 18.54609 21.926434 #> Hornet 4 Drive      20.137220 19.802472 19.63291 18.515911 18.85144 18.973212 #> Merc 280            19.042205 19.916379 17.66827 18.766076 18.53630 17.318266 #> Lincoln Continental  9.449886  9.771935 10.64444  8.692528 10.96614  8.313098 #> Chrysler Imperial    9.446983  9.829435 11.11865  8.964457 11.69595  8.346580 #> Fiat 128            27.805458 31.486748 28.09133 24.452312 24.51643 24.757907 #> Fiat X1-9           28.673155 32.126942 27.82723 25.265440 24.51643 25.816437 #> Porsche 914-2       26.173894 25.930607 25.29917 25.917949 26.01814 28.816658 #> Ford Pantera L      18.310563 17.252871 15.61905 16.662751 15.53147 16.669863 #> Volvo 142E          25.021818 26.471130 25.48484 24.898070 24.58647 26.069353 #>                       boot13   boot14    boot15    boot16    boot17   boot18 #> Mazda RX4           22.57936 21.17064 21.723214 22.335163 21.758327 20.03276 #> Hornet 4 Drive      21.53215 19.63922 18.502808 19.958580 19.274229 21.62764 #> Merc 280            19.32290 18.09167 18.558067 18.891055 19.274863 18.55365 #> Lincoln Continental 10.08783 10.20804  9.484839  9.771742  6.778726 10.31880 #> Chrysler Imperial   10.03757 11.06782  9.727419  9.892499  7.363223 10.93002 #> Fiat 128            26.92219 27.88908 26.046254 26.421907 27.797364 21.60413 #> Fiat X1-9           27.88049 28.18078 27.042491 27.480385 28.607440 22.58776 #> Porsche 914-2       26.57926 31.30031 25.560203 26.336914 27.406556 31.75930 #> Ford Pantera L      17.14143 18.72760 17.872990 18.138485 17.059597 16.65913 #> Volvo 142E          23.86174 27.25885 23.793789 23.546842 26.453907 28.53635 #>                        boot19    boot20 #> Mazda RX4           22.490042 22.404499 #> Hornet 4 Drive      19.558860 18.551515 #> Merc 280            18.369479 18.837312 #> Lincoln Continental  8.167621  7.361824 #> Chrysler Imperial    8.338122  7.652546 #> Fiat 128            27.559192 25.187786 #> Fiat X1-9           28.766635 26.346452 #> Porsche 914-2       27.516819 23.150085 #> Ford Pantera L      18.038968 17.580329 #> Volvo 142E          24.373386 22.148463  ## Alternal Matrix Interface  # Train model set.seed(123) bolasso_mat <- bolasso(   x = model.matrix(mpg ~ . - 1, mtcars_train),   y = mtcars_train[, 1],   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" )  # Extract selected variables selected_vars(bolasso_mat, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     21.9  #> 2 wt            -3.05  # Bagged ensemble prediction on test data predict(bolasso_mat,         new.data = model.matrix(mpg ~ . - 1, mtcars_test),         select = \"lambda.min\") #>                        boot1    boot2     boot3    boot4    boot5    boot6 #> Mazda RX4           20.76134 20.34704 21.239324 19.60828 21.12979 20.96082 #> Hornet 4 Drive      18.75163 19.29475 16.366901 17.61425 18.05342 18.98135 #> Merc 280            17.89915 21.65255 15.322505 18.66957 18.48299 18.09306 #> Lincoln Continental 10.54323 17.21361  9.862591 11.41671 10.01480 10.50363 #> Chrysler Imperial   10.70333 17.99750 10.009883 11.76223 10.23903 10.60520 #> Fiat 128            26.77030 26.77135 27.474993 23.85337 23.79135 25.40743 #> Fiat X1-9           27.66538 25.81630 28.044054 24.08995 24.65012 26.28904 #> Porsche 914-2       26.79507 24.71485 28.210405 23.07841 22.23800 25.33830 #> Ford Pantera L      17.80783 19.85633 19.977539 15.11513 17.53030 17.47561 #> Volvo 142E          24.50529 27.16728 26.479446 22.39905 21.61929 23.01562 #>                         boot7     boot8    boot9    boot10   boot11    boot12 #> Mazda RX4           22.869079 21.753744 16.65284 21.499026 18.54609 21.926434 #> Hornet 4 Drive      20.137220 19.802472 19.63291 18.515911 18.85144 18.973212 #> Merc 280            19.042205 19.916379 17.66827 18.766076 18.53630 17.318266 #> Lincoln Continental  9.449886  9.771935 10.64444  8.692528 10.96614  8.313098 #> Chrysler Imperial    9.446983  9.829435 11.11865  8.964457 11.69595  8.346580 #> Fiat 128            27.805458 31.486748 28.09133 24.452312 24.51643 24.757907 #> Fiat X1-9           28.673155 32.126942 27.82723 25.265440 24.51643 25.816437 #> Porsche 914-2       26.173894 25.930607 25.29917 25.917949 26.01814 28.816658 #> Ford Pantera L      18.310563 17.252871 15.61905 16.662751 15.53147 16.669863 #> Volvo 142E          25.021818 26.471130 25.48484 24.898070 24.58647 26.069353 #>                       boot13   boot14    boot15    boot16    boot17   boot18 #> Mazda RX4           22.57936 21.17064 21.723214 22.335163 21.758327 18.83813 #> Hornet 4 Drive      21.53215 19.63922 18.502808 19.958580 19.274229 21.93688 #> Merc 280            19.32290 18.09167 18.558067 18.891055 19.274863 18.76669 #> Lincoln Continental 10.08783 10.20804  9.484839  9.771742  6.778726 10.16809 #> Chrysler Imperial   10.03757 11.06782  9.727419  9.892499  7.363223 10.76310 #> Fiat 128            26.92219 27.88908 26.046254 26.421907 27.797364 20.92558 #> Fiat X1-9           27.88049 28.18078 27.042491 27.480385 28.607440 22.14549 #> Porsche 914-2       26.57926 31.30031 25.560203 26.336914 27.406556 30.85193 #> Ford Pantera L      17.14143 18.72760 17.872990 18.138485 17.059597 15.75061 #> Volvo 142E          23.86174 27.25885 23.793789 23.546842 26.453907 28.62207 #>                        boot19    boot20 #> Mazda RX4           22.490042 22.404499 #> Hornet 4 Drive      19.558860 18.551515 #> Merc 280            18.369479 18.837312 #> Lincoln Continental  8.167621  7.361824 #> Chrysler Imperial    8.338122  7.652546 #> Fiat 128            27.559192 25.187786 #> Fiat X1-9           28.766635 26.346452 #> Porsche 914-2       27.516819 23.150085 #> Ford Pantera L      18.038968 17.580329 #> Volvo 142E          24.373386 22.148463"},{"path":"/reference/selected_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Bolasso-selected Variables — selected_vars","title":"Bolasso-selected Variables — selected_vars","text":"Identifies independent variables selected Bolasso algorithm least fraction time specified user-defined threshold. typical value threshold 0.9 typically lower .","code":""},{"path":"/reference/selected_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bolasso-selected Variables — selected_vars","text":"","code":"selected_vars(object, threshold = 0.9, summarise = TRUE, ...)"},{"path":"/reference/selected_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bolasso-selected Variables — selected_vars","text":"object object class bolasso. threshold numeric 0 1, specifying fraction bootstrap replicates Lasso must select variable considered selected variable. summarise Boolean indicator FALSE indicates returning full set coefficients selected variable/bootstrap replicate level TRUE indicates taking average variable's coefficient across bootstrap replicates. default value TRUE efficient interpretable. ... Additional arguments pass predict objects class cv.glmnet cv.gamlr.","code":""},{"path":"/reference/selected_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bolasso-selected Variables — selected_vars","text":"tibble selected variable respective coefficient bootstrap replicate.","code":""},{"path":[]},{"path":"/news/index.html","id":"bolasso-020","dir":"Changelog","previous_headings":"","what":"bolasso 0.2.0","title":"bolasso 0.2.0","text":"CRAN release: 2022-05-09 Added NEWS.md file track changes package. bolasso() argument form renamed formula reflect common naming conventions R statistical modeling packages. predict() coef() methods now implemented using future.apply::future_lapply allowing computing predictions extracting coefficients parallel. may result slightly worse performance (due memory overhead) model/prediction data small significantly faster e.g. generating predictions large data-set. Solved issue bolasso() argument formula. user-supplied value formula handled via deparse() default width.cutoff value 60. causing issues formulas splitting multi-element character vectors. now set maximum value 500L correctly parse lengths formulas. predict() now forces evaluation formula argument bolasso() call. resolves issue , user passes formula via variable, predict() pass variable name underlying prediction function opposed actual formula.","code":""}]
