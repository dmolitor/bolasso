[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bolasso authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Molitor. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molitor D (2021). bolasso: Model Consistent Lasso Estimation Bootstrap. R package version 0.0.3.","code":"@Manual{,   title = {bolasso: Model Consistent Lasso Estimation through the Bootstrap},   author = {Daniel Molitor},   year = {2021},   note = {R package version 0.0.3}, }"},{"path":"/index.html","id":"bolasso-","dir":"","previous_headings":"","what":"Model Consistent Lasso Estimation through the Bootstrap","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"goal bolasso implement model-consistent Lasso estimation via bootstrap [1].","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"dmolitor/bolasso\")"},{"path":"/index.html","id":"variable-selection-with-bolasso","dir":"","previous_headings":"","what":"Variable selection with bolasso","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"illustrate usage bolasso, ’ll use Pima Indians Diabetes dataset determine factors important predictors testing positive diabetes. full description input variables, see link .","code":""},{"path":"/index.html","id":"load-requisite-packages-and-data","dir":"","previous_headings":"Variable selection with bolasso","what":"Load requisite packages and data","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"First, run 100-fold bootstrapped Lasso glmnet implementation. can get rough estimate elapsed time using system.time(). can get quick overview model printing bolasso object.","code":"library(bolasso)  data(PimaIndiansDiabetes, package = \"mlbench\")  # Quick overview of the dataset str(PimaIndiansDiabetes) #> 'data.frame':    768 obs. of  9 variables: #>  $ pregnant: num  6 1 8 1 0 5 3 10 2 8 ... #>  $ glucose : num  148 85 183 89 137 116 78 115 197 125 ... #>  $ pressure: num  72 66 64 66 40 74 50 0 70 96 ... #>  $ triceps : num  35 29 0 23 35 0 32 0 45 0 ... #>  $ insulin : num  0 0 0 94 168 0 88 0 543 0 ... #>  $ mass    : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ... #>  $ pedigree: num  0.627 0.351 0.672 0.167 2.288 ... #>  $ age     : num  50 31 32 21 33 30 26 29 53 54 ... #>  $ diabetes: Factor w/ 2 levels \"neg\",\"pos\": 2 1 2 1 2 1 2 1 2 2 ... system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #> Loaded glmnet 4.1-3 #>    user  system elapsed  #>   19.83    0.12   19.96 model #> ------------- 100-fold bootstrapped Lasso ------------- #>  #> Model matrix dimensions: #>    - 8 Predictors #>    - 768 Observations #>  #> Selected variables: #>    - 6/8 predictors selected with 90% threshold #>    - 4/8 predictors selected with 100% threshold"},{"path":"/index.html","id":"extracting-selected-variables","dir":"","previous_headings":"Variable selection with bolasso","what":"Extracting selected variables","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"Next, can extract variables selected 90% 100% bootstrapped Lasso models. can also pass relevant arguments predict cv.glmnet cv.gamlr model objects. case use lambda value minimizes OOS error.","code":"selected_vars(model,               threshold = 0.9,               select = \"lambda.min\") #> # A tibble: 7 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 pressure    -0.0113 #> 5 mass         0.0821 #> 6 pedigree     0.849  #> 7 age          0.0138  selected_vars(model,               threshold = 1,               select = \"lambda.min\") #> # A tibble: 5 x 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept   -8.15   #> 2 pregnant     0.119  #> 3 glucose      0.0348 #> 4 mass         0.0821 #> 5 pedigree     0.849"},{"path":"/index.html","id":"plotting-selected-variables","dir":"","previous_headings":"Variable selection with bolasso","what":"Plotting selected variables","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"can also quickly plot selected variables 90% 100% threshold values.","code":"plot(model, threshold = 0.9) plot(model, threshold = 1)"},{"path":"/index.html","id":"parallelizing-bolasso","dir":"","previous_headings":"Variable selection with bolasso","what":"Parallelizing bolasso","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"can execute bolasso parallel via future package. can copy code one minor tweak shown . can now run code , unaltered, execute parallel.","code":"future::plan(\"multisession\") system.time({   model <- bolasso(     diabetes ~ .,     data = PimaIndiansDiabetes,     n.boot = 100,      implement = \"glmnet\",     family = \"binomial\"   ) }) #>    user  system elapsed  #>    0.12    0.05    5.55"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model Consistent Lasso Estimation through the Bootstrap","text":"[1] Bach, Francis. “Bolasso: Model Consistent Lasso Estimation Bootstrap.” ArXiv:0804.1302 [Cs, Math, Stat], April 8, 2008. http://arxiv.org/abs/0804.1302.","code":""},{"path":"/reference/bolasso.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootsrap-enhanced Lasso — bolasso","title":"Bootsrap-enhanced Lasso — bolasso","text":"function implements model-consistent Lasso estimation bootstrap. supports parallel processing way future package, allowing user flexibly specify many parallelization methods. method developed variable-selection algorithm, package also supports making ensemble predictions new data using bagged Lasso models.","code":""},{"path":"/reference/bolasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"bolasso(   form,   data,   n.boot = 100,   progress = TRUE,   implement = \"glmnet\",   x = NULL,   y = NULL,   ... )"},{"path":"/reference/bolasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootsrap-enhanced Lasso — bolasso","text":"form optional object class formula (one can coerced class): symbolic description model fitted. Can omitted x y non-missing. data optional object class data.frame contains modeling variables referenced form. Can omitted x y non-missing. n.boot integer specifying number bootstrap replicates. progress boolean indicating whether display progress across bootstrap folds. implement character; either 'glmnet' 'gamlr', specifying Lasso implementation utilize. specific modeling details, see glmnet::cv.glmnet gamlr::cv.gamlr. x optional predictor matrix lieu form data. y optional response vector lieu form data. ... Additional parameters pass either glmnet::cv.glmnet gamlr::cv.gamlr.","code":""},{"path":"/reference/bolasso.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootsrap-enhanced Lasso — bolasso","text":"object class bolasso. object list length n.boot cv.glmnet cv.gamlr objects.","code":""},{"path":"/reference/bolasso.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootsrap-enhanced Lasso — bolasso","text":"Bach FR (2008). “Bolasso: model consistent Lasso estimation bootstrap.” CoRR, abs/0804.1302. 0804.1302, http://arxiv.org/abs/0804.1302.","code":""},{"path":[]},{"path":"/reference/bolasso.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootsrap-enhanced Lasso — bolasso","text":"","code":"mtcars[, c(2, 10:11)] <- lapply(mtcars[, c(2, 10:11)], as.factor) idx <- sample(nrow(mtcars), 22) mtcars_train <- mtcars[idx, ] mtcars_test <- mtcars[-idx, ]  ## Formula Interface  # Train model set.seed(123) bolasso_form <- bolasso(   form = mpg ~ .,   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" ) #> Loaded glmnet 4.1-3  # Extract selected variables selected_vars(bolasso_form, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     23.1  #> 2 wt            -3.68  # Bagged ensemble prediction on test data predict(bolasso_form,         new.data = mtcars_test,         select = \"lambda.min\") #>                         boot1    boot2    boot3     boot4     boot5    boot6 #> Mazda RX4           21.202865 24.06137 20.37871 19.693430 22.115000 22.88248 #> Valiant             20.825762 20.27784 14.05869 21.108939 20.806772 19.94063 #> Duster 360          15.241608 12.73562 11.37251 16.573997 16.048799 16.93248 #> Merc 230            27.293281 23.38017 26.61376 27.069320 25.023952 21.55425 #> Merc 450SL          17.543627 15.80403 17.62931 15.718086 16.842947 17.56647 #> Lincoln Continental  8.919666 10.46411 11.49057  9.058440  7.248073 10.79303 #> Chrysler Imperial    9.022469 10.89780 11.52304  9.027576  7.329615 10.79875 #> AMC Javelin         18.631889 18.62255 21.02658 19.536933 18.273147 19.49886 #> Fiat X1-9           27.574195 33.08942 29.12801 28.153534 28.356123 26.17803 #> Ford Pantera L      16.547624 21.15062 17.82215 17.260680 17.111490 18.02345 #>                         boot7    boot8     boot9   boot10    boot11   boot12 #> Mazda RX4           22.486255 21.38286 21.610324 23.08422 24.291342 20.93438 #> Valiant             19.154842 20.97607 20.754243 20.23630 18.027761 19.43478 #> Duster 360          17.034553 12.51162 16.187325 14.41893 15.236248 14.30810 #> Merc 230            21.204176 24.06061 24.789197 22.64368 22.967191 24.07882 #> Merc 450SL          16.999073 15.48568 16.978615 16.86316 17.385591 16.33228 #> Lincoln Continental  8.374911 12.45827  8.520507 11.46582  9.798639 10.79223 #> Chrysler Imperial    8.622100 12.62926  8.558614 11.27337  9.592298 10.89383 #> AMC Javelin         18.547813 17.50024 18.212283 18.43781 18.627835 20.53950 #> Fiat X1-9           26.640025 32.01573 27.342741 26.48623 31.368523 25.85582 #> Ford Pantera L      18.681975 21.25797 17.006852 15.14260 18.560905 17.44830 #>                       boot13    boot14   boot15   boot16    boot17    boot18 #> Mazda RX4           22.03864 22.651059 20.82898 22.37334 23.212715 22.232274 #> Valiant             18.67078 18.984169 18.39854 22.05235 19.130710 19.519889 #> Duster 360          16.93199 16.366149 15.47038 11.08385 15.565383 14.929037 #> Merc 230            24.09137 20.680635 23.55040 28.93754 20.588928 22.349134 #> Merc 450SL          17.09156 16.748638 15.94579 15.80868 16.476548 17.826066 #> Lincoln Continental 11.10656  7.700033 10.05250 13.82411  9.709705  7.886874 #> Chrysler Imperial   11.32578  7.901002 10.31644 13.21525  9.647786  7.850047 #> AMC Javelin         18.45623 18.617316 18.90448 17.98194 18.197511 19.800347 #> Fiat X1-9           28.49587 26.893450 25.11489 30.44060 26.764735 28.159028 #> Ford Pantera L      18.62032 18.082208 16.49400 15.20114 17.778348 16.140974 #>                        boot19   boot20 #> Mazda RX4           23.192663 25.30041 #> Valiant             20.554695 20.10232 #> Duster 360          16.313202 15.28669 #> Merc 230            27.046948 21.32139 #> Merc 450SL          19.301097 17.03815 #> Lincoln Continental  9.059540 10.70861 #> Chrysler Imperial    8.805335 10.48920 #> AMC Javelin         20.848505 18.81698 #> Fiat X1-9           29.033780 28.91711 #> Ford Pantera L      16.812706 19.02166  ## Alternal Matrix Interface  # Train model set.seed(123) bolasso_mat <- bolasso(   x = model.matrix(mpg ~ . - 1, mtcars_train),   y = mtcars_train[, 1],   data = mtcars_train,   n.boot = 20,   nfolds = 5,   implement = \"glmnet\" )  # Extract selected variables selected_vars(bolasso_mat, threshold = 0.9, select = \"lambda.min\") #> # A tibble: 2 × 2 #>   variable  mean_coef #>   <chr>         <dbl> #> 1 Intercept     23.1  #> 2 wt            -3.68  # Bagged ensemble prediction on test data predict(bolasso_mat,         new.data = model.matrix(mpg ~ . - 1, mtcars_test),         select = \"lambda.min\") #>                         boot1    boot2    boot3     boot4     boot5    boot6 #> Mazda RX4           21.202865 24.06137 20.37871 19.693430 22.115000 22.88248 #> Valiant             20.825762 20.27784 14.05869 21.108939 20.806772 19.94063 #> Duster 360          15.241608 12.73562 11.37251 16.573997 16.048799 16.93248 #> Merc 230            27.293281 23.38017 26.61376 27.069320 25.023952 21.55425 #> Merc 450SL          17.543627 15.80403 17.62931 15.718086 16.842947 17.56647 #> Lincoln Continental  8.919666 10.46411 11.49057  9.058440  7.248073 10.79303 #> Chrysler Imperial    9.022469 10.89780 11.52304  9.027576  7.329615 10.79875 #> AMC Javelin         18.631889 18.62255 21.02658 19.536933 18.273147 19.49886 #> Fiat X1-9           27.574195 33.08942 29.12801 28.153534 28.356123 26.17803 #> Ford Pantera L      16.547624 21.15062 17.82215 17.260680 17.111490 18.02345 #>                         boot7    boot8     boot9   boot10    boot11   boot12 #> Mazda RX4           22.486255 21.38286 21.610324 23.08422 24.291342 20.93438 #> Valiant             19.154842 20.97607 20.754243 20.23630 18.027761 19.43478 #> Duster 360          17.034553 12.51162 16.187325 14.41893 15.236248 14.30810 #> Merc 230            21.204176 24.06061 24.789197 22.64368 22.967191 24.07882 #> Merc 450SL          16.999073 15.48568 16.978615 16.86316 17.385591 16.33228 #> Lincoln Continental  8.374911 12.45827  8.520507 11.46582  9.798639 10.79223 #> Chrysler Imperial    8.622100 12.62926  8.558614 11.27337  9.592298 10.89383 #> AMC Javelin         18.547813 17.50024 18.212283 18.43781 18.627835 20.53950 #> Fiat X1-9           26.640025 32.01573 27.342741 26.48623 31.368523 25.85582 #> Ford Pantera L      18.681975 21.25797 17.006852 15.14260 18.560905 17.44830 #>                       boot13    boot14   boot15   boot16    boot17    boot18 #> Mazda RX4           22.03864 22.651059 20.82898 22.37334 23.212715 22.232274 #> Valiant             18.67078 18.984169 18.39854 22.05235 19.130710 19.519889 #> Duster 360          16.93199 16.366149 15.47038 11.08385 15.565383 14.929037 #> Merc 230            24.09137 20.680635 23.55040 28.93754 20.588928 22.349134 #> Merc 450SL          17.09156 16.748638 15.94579 15.80868 16.476548 17.826066 #> Lincoln Continental 11.10656  7.700033 10.05250 13.82411  9.709705  7.886874 #> Chrysler Imperial   11.32578  7.901002 10.31644 13.21525  9.647786  7.850047 #> AMC Javelin         18.45623 18.617316 18.90448 17.98194 18.197511 19.800347 #> Fiat X1-9           28.49587 26.893450 25.11489 30.44060 26.764735 28.159028 #> Ford Pantera L      18.62032 18.082208 16.49400 15.20114 17.778348 16.140974 #>                        boot19   boot20 #> Mazda RX4           23.192663 25.30041 #> Valiant             20.554695 20.10232 #> Duster 360          16.313202 15.28669 #> Merc 230            27.046948 21.32139 #> Merc 450SL          19.301097 17.03815 #> Lincoln Continental  9.059540 10.70861 #> Chrysler Imperial    8.805335 10.48920 #> AMC Javelin         20.848505 18.81698 #> Fiat X1-9           29.033780 28.91711 #> Ford Pantera L      16.812706 19.02166"},{"path":"/reference/selected_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Bolasso-selected Variables — selected_vars","title":"Bolasso-selected Variables — selected_vars","text":"Identifies independent variables selected Bolasso algorithm least fraction time specified user-defined threshold. typical value threshold 0.9 typically lower .","code":""},{"path":"/reference/selected_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bolasso-selected Variables — selected_vars","text":"","code":"selected_vars(object, threshold = 0.9, summarise = TRUE, ...)"},{"path":"/reference/selected_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bolasso-selected Variables — selected_vars","text":"object object class bolasso. threshold numeric 0 1, specifying fraction bootstrap replicates Lasso must select variable considered selected variable. summarise Boolean indicator FALSE indicates returning full set coefficients selected variable/bootstrap replicate level TRUE indicates taking average variable's coefficient across bootstrap replicates. default value TRUE efficient interpretable. ... Additional arguments pass predict objects class cv.glmnet cv.gamlr.","code":""},{"path":"/reference/selected_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bolasso-selected Variables — selected_vars","text":"tibble selected variable respective coefficient bootstrap replicate.","code":""},{"path":[]}]
